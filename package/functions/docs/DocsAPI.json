{
    "documents": {
        "link": "https://docs.db-script.xyz",
        "abbreviate": {
            "name": "$abbreviate",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/abbreviate",
            "description": "Abbreviates large numbers with a symbol.",
            "usage": "$abbreviate[number]",
            "property": "`number` - A number to abbreviate. Larger numbers over 1000 will be abbreviated."
        },
        "activity": {
            "name": "$activity",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/activity",
            "description": "Returns a users game they're playing or the program they're running if they have their game status turned on.",
            "usage": "$activity\n$activity[]\n$activity[userID]",
            "property": "Leave brackets empty for command authors activity presence. Same as no brackets.\n`userID` - Define a userID to return another users activity presence!"
        },
        "addattachment": {
            "name": "$addAttachment",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/addattachment",
            "description": "Adds an attachment to your message via image URL. If the second field is left empty or non-existent, the function will give the image a randomized name.",
            "usage": "$addAttachment[url]\n$addAttachment[url;name]",
            "property": "`url` - Supply the url of the image attachment to be added to the message.\n`name` - Supply a new name to give to the image. If left empty or if 2nd field if non-existent, the function will give the image a randomized name."
        },
        "addcmdreactions": {
            "name": "$addCmdReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/addcmdreactions",
            "description": "Adds reactions to your command message, Separate each default emoji or custom emoji ID with a semi-colon `;`.",
            "usage": "$addCmdReactions[defaultEmoji]\n$addCmdReactions[customEmojiID]",
            "property": "`defaultEmoji` - The default emoji. See example 1.\n`customEmojiID` - custom emoji IDs. See example 2"
        },
        "addcooldown": {
            "name": "$addCooldown",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/addcooldown",
            "description": "Adds cooldown time to an existing cooldown in effect. You can return the amount of time left in the cooldown in the error message with `{time}`.",
            "usage": "$addCooldown[time;type;command]\n$addCooldown[time;type;command;id]",
            "property": "`time` - The amount of time to add to the cooldown.\n`type` - The type of cooldown to add time to.\n`command` - The command to associate the cooldown with.\n`id` - The ID associated with the cooldown. For affecting specific guilds, users or channels."
        },
        "addemoji": {
            "name": "$addEmoji",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/addemoji",
            "description": "Adds an emoji to the discord server where the command is executed.",
            "usage": "$addEmoji[url;name]\n$addEmoji[url;name;(yes/no)]\n$addEmoji[url;name;(yes/no);roleID;roleID;...etc]",
            "property": "`url` - An image url being converted into an emoji.\n`name` - Define the desired name of the emoji.\n`yes/no` - If `yes`, bot will return emoji. If `no`, bot will not return emoji.\n`roleID` - Any amount of roleIDs that will have access to the new emoji."
        },
        "addfield": {
            "name": "$addField",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/addfield",
            "description": "Allows you to add more fields in your embed. You can choose between inline, or not. Inline will not be inline on mobile devices. This is not a bug, but a Discord issue.",
            "usage": "$addField[title;body]\n$addField[title;body;yes]",
            "property": "`title` - The title of the embed field\n`body` - The body or description of the embed field\n`yes` - This indicates if this field will be inline with the next."
        },
        "addmessagereactions": {
            "name": "$addMessageReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/addmessagereactions",
            "description": "Adds a bot reaction(s) to a message in a channel of the current guild.",
            "usage": "$addMessageReactions[channelID;messageID;emoji;emoji;etc;...]",
            "property": "`channelID` - Channel ID where the message is located.\n`messageID` - The ID of the message.\n`emoji` - ID of the emoji you want the bot to react with. Multiple reactions can be added with more emoji's separated with semi-colons"
        },
        "addreactions": {
            "name": "$addReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/addreactions",
            "description": "Adds emojis to the bot's response. Separate one or more emojis with a semi-colon `;` between them.",
            "usage": "$addReactions[basicEmoji]\n$addReactions[customEmoji]",
            "property": "`defaultEmoji` - Default emojis are emojis that come with your device (ðŸ˜ƒ).\n`customEmoji` - Custom emojis are to be defined with just their IDs (2374590238746598236)."
        },
        "addtimestamp": {
            "name": "$addTimestamp",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/addtimestamp",
            "description": "Adds a time stamp to your embed and put the time the command was ran in the embed footer. Must be used outside of the embed. Function will insert the timestamp itself.",
            "usage": "$addTimestamp"
        },
        "admincount": {
            "name": "$adminCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/admincount",
            "description": "Returns the amount of bots, humans or total admins in a guild.",
            "usage": "$adminCount\n$adminCount[]\n$adminCount[guildID]\n$adminCount[guildID;option]",
            "property": "Leave empty to define the current guild and return the total admin count. Same as no brackets.\n`guildID` - The ID of the guild to return data from.\n`option` - Optionally choose what data to return.\n \n__**Options:**__\n`bot` - Returns the admin count of all the bots in the guild.\n`human` - Returns the admin count of all the humans in the guild.\n`all` - Returns the total admin count of the bots and humans combined."
        },
        "afkchannel": {
            "name": "$afkChannel",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/afkchannel",
            "description": "Returns the AFK channel ID of the provided guildID (if enabled). Bot will return `undefined` if the afk channel is not enabled in the guild.",
            "usage": "$afkChannel\n$afkChannel[]\n$afkChannel[guildID]",
            "property": "Leave brackets empty to define the current guild. Same as no brackets.\n`guildID` - Supply the guild ID for the afk channel ID in that guild."
        },
        "afktimeout": {
            "name": "$afkTimeout",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/afktimeout",
            "description": "Returns the AFK channel timeout of the provided guildID in seconds (if enabled). Bot will return `undefined` if the afk channel is not enabled in the guild.",
            "usage": "$afkTimeout\n$afkTimeout[]\n$afkTimeout[guildID]",
            "property": "Leave brackets empty to define the current guild. Same as no brackets.\n`guildID` - Supply the guild ID for the afk channel ID in that guild."
        },
        "allcategoriescount": {
            "name": "$allCategoriesCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allcategoriescount",
            "description": "Returns the total number of categories from all the servers your bot is in.",
            "usage": "$allCategoriesCount"
        },
        "allchannelscount": {
            "name": "$allChannelsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allchannelscount",
            "description": "Returns the total number of all combined types of channels from all the servers your bot is in, including categories.",
            "usage": "$allChannelsCount"
        },
        "allmemberscount": {
            "name": "$allMembersCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allmemberscount",
            "description": "Returns the total number of users from all the servers your bot is in.",
            "usage": "$allMembersCount"
        },
        "allnewschannelscount": {
            "name": "$allNewsChannelsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allnewschannelscount",
            "description": "Returns the total number of news channels from all the servers your bot is in. News channels are simply those announcement channels you can follow.",
            "usage": "$allNewsChannelsCount"
        },
        "alltextchannelscount": {
            "name": "$allTextChannelsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/alltextchannelscount",
            "description": "Returns the total number of text channels from all the servers your bot is in.",
            "usage": "$allTextChannelsCount"
        },
        "allvars": {
            "name": "$allVars",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allvars",
            "description": "Returns the names and/or values of all the variables in the bot.",
            "usage": "$allVars\n$allVars[]\n$allVars[names]\n$allVars[values]\n$allVars[both]"
        },
        "allvoicechannelscount": {
            "name": "$allVoiceChannelsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allvoicechannelscount",
            "description": "Returns the total number of voice channels from all the servers your bot is in.",
            "usage": "$allVoiceChannelsCount"
        },
        "allwebhookscount": {
            "name": "$allWebhooksCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/allwebhookscount",
            "description": "Returns the total number of webhooks in a guild. Define a channel to return the webhook total in that channel. Define a guild ID to return the webhook total in that guild.(bot must be in guild)",
            "usage": "$allWebhooksCount\n$allWebhooksCount[]\n$allWebhooksCount[guildID]\n$allWebhooksCount[channelID]",
            "property": "Leave brackets empty to check current guild. Same as no brackets.\n`guildID` - The guild to check.\n`channelID` - The channel to check."
        },
        "and": {
            "name": "$and",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/and",
            "description": "Returns `true` if both conditions are true. Otherwise, returns `false`.",
            "usage": "$and[condition1;condition2]",
            "property": "`condition1` - The first condition in the check.\n`condition2` - The second condition in the check.\n \n**Operators**:\n`>` (greater than)\n`<` (less than)\n`>=` (greater than or equal to)\n`<=` (less than or equal to)\n`==` (equal to)\n`!=` (not equal to)"
        },
        "api": {
            "name": "$api",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/api",
            "description": "Fetch results from a JSON API with a GET method.",
            "usage": "$api[api link;property;property;etc...]",
            "property": "`api link` - Link of the API.\n`property` - Property accessory to fetch the API"
        },
        "argscheck": {
            "name": "$argsCheck",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/argscheck",
            "description": "Checks if the set amount of provided arguments exist. If they do not, the bot will return the error message.",
            "usage": "$argsCheck[>value;error message]\n$argsCheck[<value;error message]\n$argsCheck[value;error message]",
            "property": "`>value` - Command must pass in more than the defined args to execute the command.\n`<value` - Command must pass in less than the defined args to execute the command.\n`value` - A number defining how many specific args are required to execute the command."
        },
        "argsfrom": {
            "name": "$argsFrom",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/argsfrom",
            "description": "Returns the arguments between the content defined from the 1st field to the 2nd field. If the 1st field is defined and 2nd field is not defined, bot will return everything after the 1st field.",
            "usage": "$argsFrom[start;end;separator]",
            "property": "`start` - The starting point. Define as a number starting at 1 being your first argument.\n`end` - The ending point. Define as a number being the last argument to return in the string.\n`separator` - Each argument will be separated with the content in this field. \n and spaces can be used to separate."
        },
        "argslength": {
            "name": "$argsLength",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/argslength",
            "description": "Returns the number of arguments in the message or the arguments provided in the command.",
            "usage": "$argsLength\n$argsLength[]\n$argsLength[content]",
            "property": "Leave brackets empty to return the number of arguments provided in the entire command.\n`content` - Bot will return the number of arguments within the brackets."
        },
        "attachmentlink": {
            "name": "$attachmentLink",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/attachmentlink",
            "description": "Returns the link of the attachment used in the message. Returns `undefined` if the message did not contain an attachment.",
            "usage": "$attachmentLink"
        },
        "attachmentsize": {
            "name": "$attachmentSize",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/attachmentsize",
            "description": "Returns the size of the attachment file in the command with `3` options of formatting in bytes(`b`), kilobytes(`kb`) or megabytes(`mb`). Defaults to bytes(`b`).",
            "usage": "$attachmentSize\n$attachmentSize[]\n$attachmentSize[size]",
            "property": "Leave brackets empty to return the size of the attachment in bytes. Same as no brackets.\n`size` - Bot will return the size of the attachment in the format provided."
        },
        "author": {
            "name": "$author",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/author",
            "description": "This will set the author field in the embedded message. Optional URL is an image link of some kind. Usually someone's avatar or guild/bot icon.",
            "usage": "$author[title]\n$author[title;url]",
            "property": "`title` - The title of the embed author\n`url` - Sets the embed author icon. Can be any valid image URL. This is optional."
        },
        "authoravatar": {
            "name": "$authorAvatar",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/authoravatar",
            "description": "Returns the command authors avatar with optional dynamics.",
            "usage": "$authorAvatar\n$authorAvatar[]\n\n$authorAvatar[size]\n$authorAvatar[size;format]",
            "property": "Leave brackets emmpty to return the command author's avatar. Same as no brackets.\n`size` - The size the avatar will be. Must be a number\n`format` - The format the image will be when clicked on and/or saved etc."
        },
        "authorid": {
            "name": "$authorID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/authorid",
            "description": "Returns the message author's user ID.",
            "usage": "$authorID"
        },
        "awaitcmdreactions": {
            "name": "$awaitCmdReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/awaitcmdreactions",
            "description": "The bot will execute a command when someone reacts to your message. If the user reacts with the 2nd emoji, the 2nd command will be triggered.",
            "usage": "$awaitCmdReactions[emoji,emoji;...userID;time;cmd1,cmd2,...;error message]"
        },
        "awaitmessages": {
            "name": "$awaitMessages",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/awaitmessages",
            "description": "Waits for a specific message to be sent or until the bot is rebooted!",
            "usage": "$awaitMessages[message;userID/everyone;time;command;error message]"
        },
        "awaitreactions": {
            "name": "$awaitReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/awaitreactions",
            "description": "Same as $awaitCmdReactions except it waits for a reaction to the *bots* message and the bot will execute a command corresponding with the reaction.",
            "usage": "$awaitMessages[message;userID/everyone;time;command;error message]"
        },
        "ban": {
            "name": "$ban",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/ban",
            "description": "Allows you to ban a user from a guild. 3rd field may be optional with a reason.",
            "usage": "$ban[userID]\n$ban[userID;guildID]\n$ban[userID;guildID;reason]",
            "property": "`userID` - ID of the user to ban.\n`guildID` - The ID of the guild where you want the ban to happen.\n`reason` - Optional reason that logs in the audit log."
        },
        "banscount": {
            "name": "$bansCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/banscount",
            "description": "Returns the total number of users banned in the current or specific guild.",
            "usage": "$bansCount\n$bansCount[]\n$bansCount[guildID]",
            "property": "Leave brackets empty to return the total number of banned users in the current guild. Same as no brackets.\n`guildID` - Defined a guild ID to return the total number of banned users in that guild."
        },
        "blacklist": {
            "name": "$blackList",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/blacklist",
            "description": "add/remove any server/user to/from the bots blacklist.",
            "usage": "$blackList[add;userID;user]\n$blackList[remove;userID;user]\n$blackList[add;serverID;server]\n$blackList[remove;serverID;server]"
        },
        "blacklistroles": {
            "name": "$blackListRoles",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/blacklistroles",
            "description": "Users wearing any of the role IDs in the blacklist cannot execute the command.",
            "usage": "$blackListRoles[roleID;roleID;roleID;...;error message]",
            "property": "`roleID` - The ID of the role(s) to blacklist.\n`error` - The message to send to the channel if the user is wearing a blacklisted role."
        },
        "bold": {
            "name": "$bold",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/bold",
            "description": "Returns the message content in bold.",
            "usage": "$bold[input]",
            "property": "input - The content input to bolden."
        },
        "botinguild": {
            "name": "$botInGuild",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/botinguild",
            "description": "Returns `true` if the bot is in the server of provided guild ID. Otherwise, function returns `false`.",
            "usage": "$botInGuild\n$botInGuild[]\n$botInGuild[guildID]",
            "property": "Leave brackets empty to check if the bot is in the guild where the command is executed. Same as no brackets.\n`guildID` - The ID of the guild to check."
        },
        "botleave": {
            "name": "$botLeave",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/botleave",
            "description": "Makes the bot leave the current guild if no server ID is defined. Supply a guild ID to remove the bot from that specific guild.",
            "usage": "$botLeave\n$botLeave[]\n$botLeave[guildID]",
            "property": "Leave brackets empty to make the bot leave the guild where the command was executed. Same as no brackets.\n`guildID` - Bot will leave the guild of the defined guild ID."
        },
        "bottyping": {
            "name": "$botTyping",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/bottyping",
            "description": "Shows the bot typing in the chat for 5 seconds upon command execution.",
            "usage": "$botTyping\n$botTyping[]\n$botTyping[time]",
            "property": "Leave brackets empty to make the bot type for 5 seconds by default. Same as no brackets.\n`time` - Bot will type for however long you tell it to type for"
        },
        "categorycooldown": {
            "name": "$categoryCooldown",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/categorycooldown",
            "description": "A command cooldown that affects all channels in an entire guild category. `{time}` can be used to determine how much time is left on the cooldown.",
            "usage": "$categoryCooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond in any channel in that category again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown when attempting to execute the command while under cooldown."
        },
        "categorycount": {
            "name": "$categoryCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/categorycount",
            "description": "Returns the total number of categories that exist in the current or specific guild.",
            "usage": "$categoryCount\n$categoryCount[]\n$categoryCount[guildID]",
            "property": "Leave brackets empty to return the number of categories that exist in the current guild. Same as no brackets.\n`guildID` - Returns the total number of categories that exist in the specific guild"
        },
        "categoryposition": {
            "name": "$categoryPosition",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/categoryposition",
            "description": "Returns the position of a category starting from the top of the channel list.",
            "usage": "$categoryPosition[categoryID]",
            "property": "`categoryID` - Supply a category ID to get the raw position"
        },
        "channel": {
            "name": "$channel",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/channel",
            "description": "A `Compact Function` with `17` options to choose from.",
            "usage": "$channel[channelID;option]",
            "property": "`channelID` - Define the channel you're calling upon with an ID\n`option` - Define the property by its name. See the official documentation for more info.\n \n__**Options:**__\n- created\n- guildid\n- guildname\n- id\n- isdeleteable\n- isdeleted\n- ismanageable\n- isviewable\n- mention\n- name\n- parentid\n- parentname\n- position\n- rawposition\n- timestamp\n- topic\n- type"
        },
        "channelcoodown": {
            "name": "$channelCoodown",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/channelcoodown",
            "description": "Adds a cooldown to the command in the current channel. The same cooldown will not take place in other channels.",
            "usage": "$channelCooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond in that channel again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown."
        },
        "channelcount": {
            "name": "$channelCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channelcount",
            "description": "Returns the total amount of specific types of channels that exist in the current or specific guild.",
            "usage": "$channelCount\n$channelCount[]\n$channelCount[guildID]\n$channelCount[guildID;option]",
            "property": "Leave brackets empty to return the total channel count in the current server. Same as no brackets.\n`guildID` - Returns the total channel count in the specific server.\n`option` - Returns the total channel count of a specific type of channel in a guild. See the official documentation for more info."
        },
        "channelexists": {
            "name": "$channelExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/channelexists",
            "description": "Returns `true` if the provided channel ID exists. Otherwise, bot will return `false`.",
            "usage": "$channelExists[channelID]",
            "property": "`channelID` - The ID of the channel to check if it exists."
        },
        "channelid": {
            "name": "$channelID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channelid",
            "description": "Returns the channel ID of the channel the command is executed in or of an existing channel in a guild your bot can read.",
            "usage": "$channelID\n$channelID[]\n$channelID[name]",
            "property": "Leave brackets empty to return the channel ID of the channel the command is executed in. Same as no brackets.\n`name` - Returns the channel ID of the supplied channel name."
        },
        "channelname": {
            "name": "$channelName",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channelname",
            "description": "Returns the channel name of the channel the command is executed in or of an existing channel ID in a guild your bot can read.",
            "usage": "$channelName\n$channelName[]\n$channelName[channelID]",
            "property": "Leave brackets empty to return the channel name of the channel the command is executed in. Same as no brackets.\n`channelID` - Returns the channel name of the channel of the supplied channel ID"
        },
        "channelposition": {
            "name": "$channelPosition",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channelposition",
            "description": "Returns the raw position of the channel the command was executed in or a specific channel. Raw position starts at the top of the server's channel list.",
            "usage": "$channelPosition\n$channelPosition[]\n$channelPosition[channelID]",
            "property": "Leave brackets empty to return the channel position of the channel the command is executed in. Same as no brackets.\n`channelID` - Returns the channel position of the channel of the supplied channel ID"
        },
        "channelsendmessage": {
            "name": "$channelSendMessage",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/channelsendmessage",
            "description": "Send a message to the provided channel ID. Supports embeds and executeables.",
            "usage": "$channelSendMessage[channelID;message]",
            "property": "`channelID` - channelID of the channel you want the message to go.\n`message` - the message you want to send to the given channel."
        },
        "channeltopic": {
            "name": "$channelTopic",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channeltopic",
            "description": "Returns the topic of the channel the command was executed in or in a channel of the defined channel ID. Returns 'undefined' if no topic was found.",
            "usage": "$channelTopic\n$channelTopic[]\n$channelTopic[channelID]",
            "property": "Leave brackets empty to return the channel topic of the channel the command is executed in. Same as no brackets.`channelID` - Returns the channel topic of the channel of the supplied channel ID."
        },
        "channeltype": {
            "name": "$channelType",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/channeltype",
            "description": "Returns the type of channel the command was executed in or provide a channelID for that channel type.",
            "usage": "$channelType\n$channelType[]\n$channelType[channelID]",
            "property": "Leave brackets empty to return the channel type of the channel the command is executed in. Same as no brackets.\n`channelID` - Returns the channel type of the channel of the supplied channel ID"
        },
        "charat": {
            "name": "$charAt",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/charat",
            "description": "Returns the character in the text, at the number placement you provide. Spaces also count as a character!",
            "usage": "$charAt[text;number]",
            "property": "`text` - The text being checked for.\n`number` - The character in the text to return."
        },
        "charcase": {
            "name": "$charCase",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/charcase",
            "description": "Returns `lower` if the character is lowercase. Returns `upper` if the character is uppercase. Returns `symbol` if the character is a symbol or letter. The content must be one character!",
            "usage": "$charCase[character]",
            "property": "`character` - The text must be one character."
        },
        "charcount": {
            "name": "$charCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/charcount",
            "description": "Counts how many characters are in the command message or the characters within the brackets and returns the number (includes spaces).",
            "usage": "$charCount\n$charCount[]\n$charCount[content]",
            "property": "Leave brackets empty to return the number of characters provided in the entire command. Same as no brackets.\n`content` - Bot will return the number of characters within the brackets."
        },
        "checkchars": {
            "name": "$checkChars",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/checkchars",
            "description": "Returns `true` if the fields after the first, contain any characters or words in the first field. Returns `false` if the fields after the first, does not contain the content in the first field.",
            "usage": "$checkChars[content;check]\n$checkChars[content;check;check;check;etc....]",
            "property": "`content` - The text being checked.\n`check` - The characters or words to check for in the first field. Multiple fields after the 1st can be used to check."
        },
        "checkcondition": {
            "name": "$checkCondition",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/checkcondition",
            "description": "Returns `true` if the fields after the first, contain any characters or words in the first field. Returns `false` if the fields after the first, does not contain the content in the first field.",
            "usage": "$checkCondition[value1==value2] - Equal to\n$checkCondition[value1!=value2] - Not equal to\n$checkCondition[value1>value2] - Greater than\n$checkCondition[value1<value2] - Less than\n$checkCondition[value1>=value2] - Greater than OR equal to\n$checkCondition[value1<=value2] - Less than OR equal to",
            "property": "`value1` - The first value to compare to the second value.\n`value2` - The second value to compare to the first value"
        },
        "checkcontains": {
            "name": "$checkContains",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/checkcontains",
            "description": "Returns `true` if the message contains any one of the provided words or arguments. Otherwise, function returns `false`.",
            "usage": "$checkContains[message;word1;word2;etc....]",
            "property": "`message` - The message/arguments the function will look through to find the given words/arguments\n`word` - Words/arguments the function will look for in the message."
        },
        "clear": {
            "name": "$clear",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/clear",
            "description": "Delete messages in bulk with options to delete messages from users and in specific channels.",
            "usage": "$clear[amount]\n$clear[amount;userID/everyone]\n$clear[amount;userID/everyone;channelID]",
            "property": "`amount` - The amount of messages to delete.\n`userID/everyone` - Define a userID in this field to delete messages from a specific user. everyone will delete all messages to the amount.\n`channelID` - Define a channelID to delete messages in a specific channel."
        },
        "client": {
            "name": "$client",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/client",
            "description": "A `Compact Function` that returns information relating to your bot with `22` options to choose from. A total of `26` options includes the duplicate output options.",
            "usage": "$client\n$client[option]",
            "property": "`option` - The option to execute the function with.\n \n__**Options:**__\n- activity\n- appdescription\n- appicon\n- appname\n- avatar\n- createdat\n- createdtimestamp\n- discriminator\n- discrim `(dupe of discriminator)`\n- id\n- isownerverified\n- ispublic\n- lastmessagechannelid\n- lastmcid `(dupe of lastmessagechannelid)`\n- lastmessageid\n- lastmid `(dupe of lastmessageid)`\n- mention\n- name\n- ownerid\n- presence `(dupe of status)`\n- readyat\n- readytimestamp\n- requireauth\n- status\n- tag\n- token\n- verified"
        },
        "clonechannel": {
            "name": "$cloneChannel",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/clonechannel",
            "description": "Clones the current channel or define a channel to clone.",
            "usage": "$cloneChannel\n$cloneChannel[]\n$cloneChannel[channelID;yes/true]",
            "property": "Leave brackets empty to clone the current channel. Same as no brackets.\n`channelID` - Define a channel to clone with its ID.\n`yes/true` - If defined as `yes` or `true`, the function will return the ID of the newly cloned channel, to the channel where the command was executed."
        },
        "cmd": {
            "name": "$cmd",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/cmd",
            "description": "A `Compact Function` with `7` options to choose from.",
            "usage": "$cmd\n$cmd[commandName;option]",
            "property": "`commandName` - Define the command with a command name.\n`option` - Define the property by its name.\n \n__**Options:**__\n- aliases\n- description\n- error\n- exists\n- name\n- status\n- usage"
        },
        "codeblock": {
            "name": "$codeblock",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/codeblock",
            "description": "Returns the content input in markdown codeblock with optional syntax highlighting.",
            "usage": "$codeblock[input]\n$codeblock[input;syntax]",
            "property": "`input` - The message to be placed into codeblock.\n`syntax` - Define as `true` or `yes` to add javascript syntax highlighting to the codeblock message. Otherwise, the function will simply return message in plain codeblock."
        },
        "codeblockmessage": {
            "name": "$codeblockMessage",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/codeblockmessage",
            "description": "Returns an existing message in markdown codeblock with optional syntax highlighting.",
            "usage": "$codeblockMessage[channelID;messageID]\n$codeblockMessage[channelID;messageID;syntax]",
            "property": "`channelID` - The ID of the channel to find the message.\n`messageID` - The ID of the message to return in codeblock.\n`syntax` - Define as `true` or `yes` to add javascript syntax highlighting to the codeblock message. Otherwise, the function will simply return message in plain codeblock."
        },
        "color": {
            "name": "$color",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/color",
            "description": "Set the color in an embed. You can keep the brackets empty or use `RANDOM` to get a random embed color.",
            "usage": "$color[]\n$color[int]\n$color[hex]\n$color[RANDOM]",
            "property": "`int` - The color name\n`hex` - The color in hex format\n`RANDOM` - Type RANDOM to make the bot choose random colors every command execution. You can also simply leave the brackets blank."
        },
        "colorrole": {
            "name": "$colorRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/colorrole",
            "description": "Changes the color of a role with the given hex color and roleID. If no hex color is provided, the color will be `black` by default.",
            "usage": "$colorRole[roleID;hex]\n$colorRole[roleID;guildID;hex]",
            "property": "`roleID` - The role ID of the role you're changing the color of.\n`guildID` - The guild where the role belongs to. Defaults to current guild.\n`hex` - The hex color to change the role to."
        },
        "commandaliases": {
            "name": "$commandAliases",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandaliases",
            "description": "Returns the aliases of the current or specific command.",
            "usage": "$commandAliases\n$commandAliases[]\n$commandAliases[command name]",
            "property": "Leave brackets empty to return the aliases of the current command.\n`commandName` - Returns the aliases of the specific command."
        },
        "commandcontains": {
            "name": "$commandContains",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandcontains",
            "description": "Returns `true` if the command contains the content in the 2nd field. Otherwise, function returns `false`. 3rd field indicates if the function will read everything case sensitive.",
            "usage": "$commandContains[cmd;content]\n$commandContains[cmd;content;sensitive]",
            "property": "`cmd` - The command the function will be looking through.\n`content` - The content the function will be searching for in the command.\n`sensitive` - If `true` or `yes`, the function will look for the exact content with case sensitivity. If `false` or `no`, the function will look for the exact content without case sensitivity. Defaults to `true`."
        },
        "commandcontainsamount": {
            "name": "$commandContainsAmount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandcontainsamount",
            "description": "Returns the number of times an existing command contains the content in the 2nd field. 3rd field indicates if the function will read everything case sensitive.",
            "usage": "$commandContainsAmount[cmd;content]\n$commandContainsAmount[cmd;content;sensitive]",
            "property": "`cmd` - The command the function will be looking through.\n`content` - The content the function will be searching for in the command.\n`sensitive` - If `true` or `yes`, the function will look for the exact content with case sensitivity. If `false` or `no`, the function will look for the exact content without case sensitivity. Defaults to `true`."
        },
        "commandcooldown": {
            "name": "$commandCooldown",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/commandcooldown",
            "description": "Adds a cooldown for everyone to the command. The same cooldown will not take place in other commands.",
            "usage": "$commandCooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond in that command again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown."
        },
        "commandcount": {
            "name": "$commandCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandcount",
            "description": "Returns the total number of commands in your bot. (Does not count events or bot functions)",
            "usage": "$commandCount"
        },
        "commanddescription": {
            "name": "$commandDescription",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commanddescription",
            "description": "Returns the description of the current or specific command.",
            "usage": "$commandDescription\n$commandDescription[]\n$commandDescription[command name]",
            "property": "Leave brackets empty to return the description of the current command.\n`commandName` - Returns the description of the specific command."
        },
        "commanderror": {
            "name": "$commandError",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commanderror",
            "description": "If the command has an error defined in the command header, bot will return the error message. If no error is defined, bot will return `undefined`.",
            "usage": "$commandError\n$commandError[]\n$commandError[command name]",
            "property": "Leave brackets empty to return the error of the current command. Same as no brackets.\n`commandName` - Define a command name to return the command's error message."
        },
        "commandexists": {
            "name": "$commandExists",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandexists",
            "description": "Returns `true` if the input is an existing command. Otherwise, function returns `false`.",
            "usage": "$commandExists[input]",
            "property": "`input` - If the input is a command, function will return `true`."
        },
        "commandlist": {
            "name": "$commandList",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandlist",
            "description": "Returns a list of commands in your bot.",
            "usage": "$commandList\n$commandList[separator]",
            "property": "Leave brackets empty to return the list of commands separated by a comma. Same as no brackets.`separator` - Each command will be separated by the content in the brackets."
        },
        "commandname": {
            "name": "$commandName",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandname",
            "description": "Returns the command name.",
            "usage": "$commandName\n$commandName[]\n$commandName[name]",
            "property": "Leave brackets empty to return the current command name. Same as no brackets.\n`name` - Defining a command by its name, function returns the name of that command."
        },
        "commandstatus": {
            "name": "$commandStatus",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandstatus",
            "description": "Returns `enabled` if the current or given command is enabled. Returns `disabled` if the given command is disabled. Returns `undefined` if the given command does not exist.",
            "usage": "$commandStatus\n$commandStatus[]\n$commandStatus[commandName]",
            "property": "Leave brackets empty to return the status of the current command. Same as no brackets.\n`commandName` - Define a command name to return the command's status."
        },
        "commandusage": {
            "name": "$commandUsage",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/commandusage",
            "description": "Returns the command usage of a command if one is defined. If no usage is defined in the command, bot will return `undefined`.",
            "usage": "$commandUsage\n$commandUsage[]\n$commandUsage[commandName]",
            "property": "Leave brackets empty to return the usage of the current command.\n`commandName` - Returns the usage of the specific command."
        },
        "containsamount": {
            "name": "$containsAmount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/containsamount",
            "description": "Returns the amount of characters or words defined in the 1st field from the 2nd field.",
            "usage": "$containsAmount[content;check]",
            "property": "`content` - The content being checked for.\n`check` - The characters or words checking the 1st field to see how many it contains."
        },
        "containscheck": {
            "name": "$containsCheck",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/containscheck",
            "description": "Returns `true` if the content in the 1st field contains the option value defined in the 2nd field. Otherwise, bot returns `false`. Returns `undefined` if either field is not defined.",
            "usage": "$containsCheck[content;option]",
            "property": "`content` - The content to check through.\n`option` - An option that checks the content with. Options are `letters`, `numbers` and `symbols`"
        },
        "containscustomemoji": {
            "name": "$containsCustomEmoji",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/containscustomemoji",
            "description": "Returns `true` if the content contains a custom emoji. Otherwise, function returns `false`.",
            "usage": "$containsCustomEmoji[content]",
            "property": "`content` - The content the function will search through."
        },
        "containsemoji": {
            "name": "$containsEmoji",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/containsemoji",
            "description": "Returns `true` if the content contains a system emoji. Otherwise, function returns `false`.",
            "usage": "$containsEmoji[content]",
            "property": "`content` - The content the function will search through."
        },
        "convertfrombytes": {
            "name": "$convertFromBytes",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/convertfrombytes",
            "description": "Converts a number from bytes to one of the options.",
            "usage": "$convertFromBytes[number;option]",
            "property": "`number` - The number to convert.\n`option` - The format to convert to.\n \n__**Options:**__\n- kb\n- mb\n- gb\n- tb"
        },
        "converttobytes": {
            "name": "$convertToBytes",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/converttobytes",
            "description": "Converts a number into bytes from one of the options.",
            "usage": "$convertFromBytes[number;option]",
            "property": "`number` - The number to convert.\n`option` - The format to convert from.\n \n__**Options:**__\n- kb\n- mb\n- gb\n- tb"
        },
        "cooldown": {
            "name": "$cooldown",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/cooldown",
            "description": "Adds a cooldown to your command for the executed user. If you want to see how much time is left add `{time}` in your error message.",
            "usage": "$cooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond to the user again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown."
        },
        "createchannel": {
            "name": "$createChannel",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/createchannel",
            "description": "Creates a channel. If a category ID is given, channel will be created under the given category. Valid types are `voice`, `text` and `category`.",
            "usage": "$createChannel\n$createChannel[name;type;categoryID]",
            "property": "`name` - Name of the channel being created\n`type` - Type of channel being created `text`, `voice` or `category`\n`categoryID` - If a categoryID is defined, it will create a channel under the given category. If the 3rd field is omitted or left blank, function will create a channel at the top of the channel list."
        },
        "createfile": {
            "name": "$createFile",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/createfile",
            "description": "Creates a customizable file for you in the current or defined channel.",
            "usage": "$createFile[content;name;extension;channelID]",
            "property": "`content` - Content the created file will contain.\n`name` - Define the desired name of the created file.\n`extension` - The file extension (`txt` or `js` etc..).\n`channelID` - The channel ID of where the bot will send the created file."
        },
        "createrole": {
            "name": "$createRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/createrole",
            "description": "Creates a role in the guild where the command is ran or in the guild of a valid defined guild ID.",
            "usage": "$createRole\n$createRole[name]\n$createRole[name;color]\n$createRole[name;color;position]\n$createRole[name;color;position;hoisted]\n$createRole[name;color;position;hoisted;mentionable]\n$createRole[name;color;position;hoisted;mentionable;guildID]",
            "property": "`name` - The desired name of the newly created role.(Defaults to new role).\n`color` - The color of the role.(Defaults to the default role color **99AAB5**).\n`position` - The position of the role. Defaults to **0**. (bottom of the role list).\n`hoisted` - Whether the role is hoisted. (**true** or **false**) (defaults to **false**).\n`mentionable` - Whether the role is mentionable. (**true** or **false**) (defaults to **false**).\n`guildID` - If field is defined with a valid guild ID, the role will be created in that guild, (defaults to current guild)"
        },
        "createwebhook": {
            "name": "$createWebhook",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/createwebhook",
            "description": "Creates a webhook in a channel your bot can see and returns the webhook URL.",
            "usage": "$createWebhook[channelID;name;avatarURL]",
            "property": "`channelID` - Provide the channel ID of where the webhook will be created and used for sending content.\n`name` - Supply the new name of the webhook.\n`avatarURL` - Supply an image link to attach to your new webhook."
        },
        "creationdate": {
            "name": "$creationDate",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/creationdate",
            "description": "Returns the creation date of a `user`, `role`, `guild`, `channel` or `category` with given ID.",
            "usage": "$creationDate[ID;user]\n$creationDate[ID;member]\n$creationDate[ID]",
            "property": "`ID` - The ID of the user, role, guild, channel or category.\n`user` - Date at which the user account was created. If this field exists, 1st field must be an ID of a discord user/bot.\n`member` - Date at which the account became a member of the server. If this field exists, 1st field must be an ID of a discord user/bot."
        },
        "creationtime": {
            "name": "$creationTime",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/creationtime",
            "description": "Returns how long ago a `user`, `role`, `guild`, `channel` or `category` was created with given ID.",
            "usage": "$creationTime[ID;user]\n$creationTime[ID;member]\n$creationTime[ID]",
            "property": "`ID` - The ID of the user, role, guild, channel or category.\n`user` - How long ago the user account was created. If this field exists, 1st field must be an ID of a discord user/bot.\n`member` - How long ago the account became a member of the server. If this field exists, 1st field must be an ID of a discord user/bot."
        },
        "creationtimestamp": {
            "name": "$creationTimestamp",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/creationtimestamp",
            "description": "Similiar to `$creationTime` however, bot returns the time in milliseconds for extremely accurate comparisons and checks and more.",
            "usage": "$creationTimestamp[ID;user]\n$creationTimestamp[ID;member]\n$creationTimestamp[ID]",
            "property": "`ID` - The ID of the user, role, guild, channel or category.\n`user` - How long ago the user account was created. If this field exists, 1st field must be an ID of a discord user/bot.\n`member` - How long ago the account became a member of the server. If this field exists, 1st field must be an ID of a discord user/bot."
        },
        "customcommand": {
            "name": "$customCommand",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/customcommand",
            "description": "Add or remove custom commands to/from the server. If removing a custom command, the 3rd field may be empty.",
            "usage": "$customCommand[add;name;code]\n$customCommand[remove;name]",
            "property": "`add` - Adds the custom command to the database.\n`remove` - Removes the custom command from the database.\n`name` - The name of the custom command.\n`code` - The code of the custom command(only if adding a command)"
        },
        "customcommandexists": {
            "name": "$customCommandExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/customcommandexists",
            "description": "Returns `true` if the custom command exists in the database for the guild. Otherwise, the function will return `false`.",
            "usage": "$customCommandExists[name]\n$customCommandExists[name;guildID]",
            "property": "`name` - The command to check for existence.\n`guildID` - The guild ID of the guild where the custom command belongs to. Defaults to the current guild if left blank."
        },
        "customcommandlist": {
            "name": "$customCommandList",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/customcommandlist",
            "description": "Returns the list of custom commands in the database, if any.",
            "usage": "$customCommandList[format;amount]\n$customCommandList[format]\n$customCommandList[amount]",
            "property": "`format` - The command list format and how it will show. Can be left blank to return the names.\n`amount` - The amount of commands you want to show. Leave blank for a default `10`"
        },
        "customemojis": {
            "name": "$customEmojis",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/customemojis",
            "description": "Extracts and returns all the custom emojis from the message or arguments (if any). Does not work with default emojis",
            "usage": "$customEmojis\n$customEmojis[content]",
            "property": "`content` - The content to sift through."
        },
        "dayinmonth": {
            "name": "$dayInMonth",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/dayinmonth",
            "description": "Returns the current day of the month as a number.",
            "usage": "$dayInMonth"
        },
        "dayinweek": {
            "name": "$dayInWeek",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/dayinweek",
            "description": "Gets the current day of the week as a number. Sunday returns `7` and Monday returns `1`.",
            "usage": "dayInWeek"
        },
        "dayinyear": {
            "name": "$dayInYear",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/dayinyear",
            "description": "Gets the current day of the year as a number. December 31st returns `365` and January 1st returns `1`.",
            "usage": "dayInYear"
        },
        "dbping": {
            "name": "$dbping",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/dbping",
            "description": "Returns the time it takes in milliseconds (ms) for the bot to interact with the database.",
            "usage": "$dbPing"
        },
        "defaultemojis": {
            "name": "$defaultEmojis",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/defaultemojis",
            "description": "Extracts and returns all the default emojis from the message or arguments (if any). Does not work with custom emojis.",
            "usage": "$defaultEmojis\n$defaultEmojis[content]",
            "property": "`content` - The content to sift through."
        },
        "deletechannels": {
            "name": "$deleteChannels",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletechannels",
            "description": "Deletes a channel or multiple channels the bot can see.",
            "usage": "$deleteChannels[channelID]\n$deleteChannels[channelID;channelID;etc...]",
            "property": "`channelID` - The ID of an existing channel the bot can see."
        },
        "deletecommand": {
            "name": "$deletecommand",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletecommand",
            "description": "Deletes the trigger command after a set amount of time. `1ms` is instant. Same as no brackets and leaving brackets blank.",
            "usage": "$deletecommand\n$deletecommand[]\n$deletecommand[time]",
            "property": "Leave brackets empty to delete the command immediately. Same as no brackets.\n`time` - When you want the command to be deleted. Time will be however long after the command was executed. Must be a number. Supports milliseconds."
        },
        "deleteemojis": {
            "name": "$deleteEmojis",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deleteemojis",
            "description": "Deletes one or more emojis separated by a semicolon. Provide the custom emoji(s) from the server where the command is executed to delete.",
            "usage": "$deleteEmojis[emoji]\n$deleteEmojis[emoji;emoji;emoji;...etc]",
            "property": "`emoji` - Provide the custom emoji to delete."
        },
        "deletein": {
            "name": "$deleteIn",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletein",
            "description": "Deletes the command authors command in the provided time. Supports `milliseconds` up to `days`.",
            "usage": "$deleteIn[time]",
            "property": "`time` - When you want the command to be deleted. Time starts after the command is executed."
        },
        "deletemessage": {
            "name": "$deleteMessage",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletemessage",
            "description": "Deletes a message in any channel. Optionally provide a time and the bot will delete the message in that given time. If no time is defined, bot will immediately delete the message.",
            "usage": "$deleteMessage[channelID;messageID]\n$deleteMessage[channelID;messageID;time]",
            "property": "`channelID` - Define a channel with the ID.\n`messageID` - Define a message to delete with the ID.\n`time` - Define a time to tell the bot to delete the message after command execution."
        },
        "deleterole": {
            "name": "$deleteRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deleterole",
            "description": "Deletes a role from the guild. Must use a role ID.",
            "usage": "$deleteRole[roleID]",
            "property": "`roleID` - Supply the roleID to delete it from the guild."
        },
        "deletesplittext": {
            "name": "$deleteSplitText",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletesplittext",
            "description": "Removes the field completely from the `$textSplit` and any `$splitText` above this function will be blank. Provide a number indicating the field. The number 1 will indicate the 1st one to the left.",
            "usage": "$deleteSplitText[number]",
            "property": "`number` - Provide a number indicating the field. The number 1 will indicate the 1st one to the left."
        },
        "deletewebhook": {
            "name": "$deleteWebhook",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/deletewebhook",
            "description": "Deletes a webhook with a webhook URL. The bot must see the webhook and have manage webhooks permission to delete it!",
            "usage": "$deleteWebhook[hookURL]",
            "property": "`hookURL` - Supply a webhookURL to delete the webhook."
        },
        "description": {
            "name": "$description",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/description",
            "description": "Sets the description of the embedded message.",
            "usage": "$description[message]",
            "property": "`message` - The message inside the brackets will be embedded in a message."
        },
        "detectlang": {
            "name": "$detectLang",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/detectlang",
            "description": "Provides you the language in which message is given.",
            "usage": "$detectLang[message]",
            "property": "`message` - The message the function will detect the language of."
        },
        "disablementions": {
            "name": "$disableMentions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/disablementions",
            "description": "Removes the actual mention from any mentions in the command and replaces it with `<@userIDhere>`.",
            "usage": "$disableMentions[]\n$disableMentions[all]\n$disableMentions[everyone]",
            "property": "Leave brackets empty to default to the `all` usage.`all` - Removes mentions including **@everyone**\n`everyone` - Removes all mentions from users and **@here**."
        },
        "disconnect": {
            "name": "$disconnect",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/disconnect",
            "description": "Disconnects the bot from a voice channel in the current or defined guild.",
            "usage": "$disconnect\n$disconnect[]\n$disconnect[guildID]",
            "property": "Leave brackets empty to disconnect the bot from a voice channel in the current guild. Same as no brackets.\n`guildID` - The ID of the guild where the bot will disconnect from a connected voice channel."
        },
        "discriminator": {
            "name": "$discriminator",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/discriminator",
            "description": "Returns the discriminator of the command author or a specific user.",
            "usage": "$discriminator\n$discriminator[]\n$discriminator[userID]",
            "property": "Leave brackets empty to return the command author's discriminator. Same as no brackets.\n`userID` - Returns the specific users discriminator."
        },
        "divide": {
            "name": "$divide",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/divide",
            "description": "Divides the given numbers you supply. More than 2 fields may be present for a more in-depth division.",
            "usage": "$divide[a;b]\n$divide[a;b;c]\n$divide[a;b;c;d;etc...]",
            "property": "`a` - 1st **NUMBER** for the bot to divide the 2nd number into.\n`b` - 2nd **NUMBER** for the bot to divide into the 1st number."
        },
        "djseval": {
            "name": "$djsEval",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/djseval",
            "description": "You can now Evaluate Discordjs code using our NPM!",
            "usage": "$djsEval[code]",
            "property": "`code` - Discord.js code to evaluate"
        },
        "dm": {
            "name": "$dm",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/dm",
            "description": "Sends the message to the dms of the command author or dms of the given users' ID.",
            "usage": "$dm\n$dm[]\n$dm[userID]",
            "property": "Leave brackets empty to DM the command author. Same as no brackets.\n`userID` - Dm's the defined userID"
        },
        "editin": {
            "name": "$editIn",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/editin",
            "description": "Will edit the message to whatever you want, with the given time.",
            "usage": "$editIn[time;message]\n$editIn[time;message;message2;...]",
            "property": "`time` - Edits the message in the defined time.\n`message` - The new message when the message is edited."
        },
        "editmessage": {
            "name": "$editMessage",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/editmessage",
            "description": "Edits a previously sent message from the bot  with the supplied messageID. Supports Embeds.",
            "usage": "$editMessage[channelID;messageID;newMessage]",
            "property": "`channelID` - Supply channelID if the message is in another channel.\n`messageID` - Supply a messageID from a previously sent message from the bot.\n`newMessage` - The newly edited message. Supports Embeds."
        },
        "editsplittext": {
            "name": "$editSplitText",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/editsplittext",
            "description": "Edits a value of `$splitText` to the newly defined value.",
            "usage": "$editSplitText[number;newValue]",
            "property": "`number` - The splitText number to edit.\n`newValue` - The new value of the splitText."
        },
        "emoji": {
            "name": "$emoji",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/emoji",
            "description": "A `Compact Function` pertaining to emojis in guilds the bot is in. Has `11` options to choose from.",
            "usage": "$emoji[emojiID;guildID;option]",
            "property": "`emojiID` - Define the emoji you're calling upon with an ID.\n`guildID` - The guild ID if where the emoji belongs to. Leave 2nd field blank to define the current guild.\n`option` - Define the property by its name.\n \n__**Options:**__\n- created\n- emoji\n- guildid\n- guildname\n- id\n- identifier\n- isanimated\n- isdeleted\n- ismanaged\n- name\n- url"
        },
        "emojicount": {
            "name": "$emojiCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/emojicount",
            "description": "Returns the total amount of emojis in the current server or a specific server.",
            "usage": "$emojiCount\n$emojiCount[]\n$emojiCount[guildID]\n$emojiCount[total/all]",
            "property": "Leave brackets empty for current server total emoji count.\n`guildID` - Define a guild ID to return that guilds total emoji count.\n`total/all` - Placeholder for returning the total number of emojis your bot can see from all guilds your bot is in. Both **total** and **all** placeholders work the same."
        },
        "emojitoid": {
            "name": "$emojiToID",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/emojitoid",
            "description": "Returns the ID of the provided custom emoji.",
            "usage": "$emojiToID[emoji]",
            "property": "`emoji` - Input a raw custom emoji. Just the emoji itself."
        },
        "enabled": {
            "name": "$enabled",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/enabled",
            "description": "Allows you to enable or disable a command by defining the 1st field either `yes` or `no`. The 2nd field contains the error message if the 1st field is set to 'no'. 2nd field is optional.",
            "usage": "$enabled[yes]\n$enabled[no]\n$enabled[yes;error]\n$enabled[no;error]",
            "property": "`yes` - The command will execute as intended.\n`no` - The command will not execute. If an error message is defined in the 2nd field, the error will be sent to the channel.\n`error` - The error message if the 1st field is defined as **no**."
        },
        "endswith": {
            "name": "$endsWith",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/endswith",
            "description": "Returns `true` if the content in the 1st field ends with what's in the 2nd field. Otherwise, bot returns `false`.",
            "usage": "$endsWith[content;endsWith]",
            "property": "`content` - The content being checked for.\n`endsWith` - The letters that the 1st field is being checked for containment."
        },
        "eval": {
            "name": "$eval",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/eval",
            "description": "Evaluates DB-Script codes in a discord channel.",
            "usage": "$eval[content]",
            "property": "`content` - Define DB-Script code to evaluate."
        },
        "eventscount": {
            "name": "$eventsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/eventscount",
            "description": "Returns the total number of events your bot has.",
            "usage": "$eventsCount"
        },
        "exec": {
            "name": "$exec",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/exec",
            "description": "Allows you to execute console commands from your bot. This is just like executing a command from your host's console, without having to go to the console!",
            "usage": "$exec[command]",
            "property": "`command` - Define a console command to execute."
        },
        "extractamount": {
            "name": "$extractAmount",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/extractamount",
            "description": "Returns the amount of times the 2nd field sees the extracted content in the 1st field.",
            "usage": "$extractAmount[content;extract]",
            "property": "`content` - The content to search through.\n`extract` - What to extract from the content."
        },
        "fetchbans": {
            "name": "$fetchBans",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/fetchbans",
            "description": "Returns a given number of users that are banned from the current guild, with the reasons why they were banned. Optionally define a separator to separate each user data. Default is a new line.",
            "usage": "$fetchBans[number]\n$fetchBans[number;separator]",
            "property": "`number` - Define a specific number of banned users to return!\n`separator` - Each user and reason is separated by a new line by default. Define a custom separator to separate each user data."
        },
        "filecount": {
            "name": "$fileCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/filecount",
            "description": "Returns the number of files and folders in the file path. Path always starts with `./` defined as **home**, regardless if a command handler is used.",
            "usage": "$fileCount[./path]",
            "property": "`./path` - Supply the file path. The folder it lands on is the folder it will read."
        },
        "filesize": {
            "name": "$fileSize",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/filesize",
            "description": "Returns the size of the file in bytes(b). Define the file path. Path always starts with `./` defined as **home**, regardless if a {hyper:command handler:https://docs.db-script.xyz/guides/command-handler} is used. (Generally, 1,000 bytes = 1 Kilobyte)",
            "usage": "$fileSize[./path]",
            "property": "`./path` - Supply the file path. The folder it lands on is the folder it will read."
        },
        "filter": {
            "name": "$filter",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/filter",
            "description": "Removes characters from the message.",
            "usage": "$filter[message;chars]",
            "property": "`message` - The message being filtered\n`chars` - The chars being removed from the message"
        },
        "findcategory": {
            "name": "$findCategory",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findcategory",
            "description": "Returns the category ID of the category name you supply. Accepts ID's as well. If 2nd field is defined as `name`, function returns the category's name instead.",
            "usage": "$findCategory[category]\n$findCategory[category;name]",
            "property": "`name/ID` - Define a category name or ID from the current server to return it's ID.\n`name` - Type the word `name` in the 2nd field to return the category name instead of the ID."
        },
        "findchannel": {
            "name": "$findChannel",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findchannel",
            "description": "Returns the ID of a channel with the provided ID/name/mention. Define the 2nd field as `mention` to return the ID as a mention. If the bot cannot find a valid channel, function returns `undefined`.",
            "usage": "$findChannel[channel]\n$findChannel[channel;mention]\n$findChannel[channel;name]",
            "property": "`channel` - Define a channel to return it's ID. Can be name, ID or mention.\n`mention` - Type the word mention to have the bot mention the channel instead of returning the ID.\n`name` - Type the word name to have the bot return the channel name instead of returning the ID."
        },
        "findcommand": {
            "name": "$findCommand",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findcommand",
            "description": "Returns the command name by an input of an existing command name or alias. Returns `undefined` if a valid command cannot be found from the input.",
            "usage": "$findCommand[name]\n$findCommand[alias]",
            "property": "`name` - A command name\n`alias` - A command alias"
        },
        "findemoji": {
            "name": "$findEmoji",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findemoji",
            "description": "Returns the emoji ID of any custom emoji from any guild the bot is in by simply typing the name or ID of the emoji. Not case sensitive.",
            "usage": "$findEmoji[emojiName/ID]\n$findEmoji[emojiName/ID;emoij]\n$findEmoji[emojiName/ID;name]",
            "property": "`emojiName/ID` - Define an emoji to return it's ID. Can be name or ID.\n`emoji` - Type the word emoji to have the bot return the emoji instead of returning the ID.\n`name` - Type the word name to have the bot return the emoji name instead of returning the ID."
        },
        "findinapi": {
            "name": "$findInAPI",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findinapi",
            "description": "Finds API properties from the API in the command header. The API must be in the command header and labeled `api:`",
            "usage": "$findInApi[property;property;etc...]",
            "property": "`property` - Define an API property to return it's value."
        },
        "findnumbers": {
            "name": "$findNumbers",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findnumbers",
            "description": "Returns all the numbers from the message.",
            "usage": "$findNumbers[content]",
            "property": "`content` - The content to sift through."
        },
        "findrole": {
            "name": "$findRole",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/findrole",
            "description": "Returns the ID of a role with the provided ID/name/mention. Define the 2nd field as `mention` to return the ID as a mention. If the bot cannot find a valid role, bot will return `undefined`.",
            "usage": "$findRole[role]\n$findRole[role;mention]\n$findRole[role;name]",
            "property": "`role` - Define a role to return it's ID. Can be name, ID or mention.\n`mention` - Type the word mention to have the bot mention the role instead of returning the role ID.\n`name` - Type the word name to have the bot return the role name instead of returning the role ID."
        },
        "finduser": {
            "name": "$findUser",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/finduser",
            "description": "Returns the ID of the user with the provided ID/name/mention. Define the 2nd field as `mention` to return the ID as a mention. If the bot cannot find a valid user, bot will return `undefined`.",
            "usage": "$findUser[user]\n$findUser[user;mention]\n$findUser[user;name]\n$findUser[user;tag]",
            "property": "`user` - Define a user to return it's ID. Can be name, ID or mention.\n`mention` - Type the word mention to have the bot mention the user.\n`name` - Type the word name to have the bot return the user's username.\n`tag` - Type the word tag to have the bot return the user's tag."
        },
        "finduseringuild": {
            "name": "$findUserInGuild",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/finduseringuild",
            "description": "Returns the ID/name/mention/tag of the user in a specific guild with the provided ID/name/mention. If the bot cannot find a valid user, bot will return `undefined`.",
            "usage": "$findUserInGuild[user;guild]\n$findUserInGuild[user;guild;mention]\n$findUserInGuild[user;guild;name]\n$finUserInGuild[user;guild;tag]",
            "property": "`user` - Define a user to return it's ID. Can be name, ID or mention.\n`guild` - Define the guild with a guildID.\n`mention` - Type the word mention to have the bot mention the user.\n`name` - Type the word name to have the bot return the user's username.\n`tag` - Type the word tag to have the bot return the user's tag."
        },
        "footer": {
            "name": "$footer",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/footer",
            "description": "Sets the footer of the embedded message.",
            "usage": "$footer[text]\n$footer[text;url]",
            "property": "`text` - The text to set in the footer.\n`url` - An image URL to put next to the footer text."
        },
        "functionscount": {
            "name": "$functionsCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/functionscount",
            "description": "Returns the amount of available functions the current version has to offer.",
            "usage": "$functionsCount"
        },
        "get": {
            "name": "$get",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/get",
            "description": "Returns data from the {hyper:$let:https://docs.db-script.xyz/functions/action/let} function.. Similar to {hyper:$cooldown:https://docs.db-script.xyz/functions/variables/getvar} but variable data only saves per command execution.",
            "usage": "$get[variable]",
            "property": "`variable` - Define a variable with a name. The data value is recovered using this name."
        },
        "getarg": {
            "name": "$getArg",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getarg",
            "description": "Returns an argument from the content in the first field or command line.",
            "usage": "$getArg[number]\n$getArg[content;number]",
            "property": "`content` - Looks for the argument in this content.\n`number` - The argument number to return from the content."
        },
        "getauditlog": {
            "name": "$getAuditLog",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getauditlog",
            "description": "Returns audit logs information, based on the type of action that is given. Bot must have `view audit logs` permission.",
            "usage": "$getAuditLog[userID/everyone;action]\n$getAuditLog[userID/everyone;reason]\n$getAuditLog[userID/everyone;executor]\n$getAuditLog[userID/everyone;target]",
            "property": "`userID` - Fetches the log of the defined user by their user ID.\n`everyone` - Fetches the last audit log.\n`action` - What triggered the audit log.\n`reason` - The reason defined in the audit log.\n`executor` - The user that triggered the audit log.\n`target` - What was changed to trigger the audit log."
        },
        "getauditlogs": {
            "name": "$getAuditLogs",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getauditlogs",
            "description": "Returns the number of logs you specify. 2nd field may contain any of the 4 placeholders for further details on the audit log.",
            "usage": "$getAuditLogs[number;{action}]\n$getAuditLogs[number;{reason}]\n$getAuditLogs[number;{executor}]\n$getAuditLogs[number;{target}]",
            "property": "`number` - The number of logs to return.`{action}` - What triggered the audit log.\n`{reason}` - The reason defined in the audit log.\n`{executor}` - The user that triggered the audit log.\n`{target}` - What was changed to trigger the audit log."
        },
        "getblacklist": {
            "name": "$getBlackList",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getblacklist",
            "description": "Returns a list of blacklisted users/servers ID's that are stored in the bot's database (if any).",
            "usage": "$getBlackList[type]\n$getBlackList[type;placeholders]\n$getBlackList[type;placeholders;amount]",
            "property": "`type` - Valid types are: `users` or `guilds`.\n \n`placeholders`:\nfor users type:\n`{id}` - ID of the user.\n`{name}` - Name of the user.\n`{tag}` - Tag of the user.\n \nfor guilds type:\n`{id}` - ID of the guild.\n`{name}` - Name of the guild.\n`{members}` - Number of members the guild has.\n \n`amount` - Lists up to the amount of blacklisted objects in the database. Defaults to 10."
        },
        "getbotinvite": {
            "name": "$getBotInvite",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getbotinvite",
            "description": "Returns an invite link from your bot.",
            "usage": "$getBotInvite\n$getBotInvite[]\n$getBotInvite[option]",
            "property": "Leave brackets empty to return a normal bot invite. Same as no brackets.\n`option` - Returns a bot invite with the defined option.\n \n__Options: *1 option at a time*__\n`normal` - A normal bot invite with all the needed permissions for the bot to work.\n`admin` - An admin bot invite with administrator permissions.\n`none` - A bot invite with zero (0) permissions. The bot will join without its bot role."
        },
        "getchannelvar": {
            "name": "$getChannelVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/getchannelvar",
            "description": "Returns the value of the provided channel variable in the current channel. You can provide a channel ID in the 2nd field to get the variable value of the specific channel.",
            "usage": "$getChannelVar[varName]\n$getChannelVar[varName;channelID]",
            "property": "`varName` - The variable being called in the command\n`channelID` - The channel ID attached to the variable **(You can omit this field to get the current channel variable value)**"
        },
        "getfromembed": {
            "name": "$getFromEmbed",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getfromembed",
            "description": "Returns data from a specific part of an embed.",
            "usage": "$getFromEmbed[channelID;messageID;type]",
            "property": "`channelID` - Channel ID of where the embed is.\n`messageID` - Message ID of the embedded message.\n`type` - Part of the embed you are grabbing.\n \n__Types(14):__\n- author\n- authoricon\n- title\n- description\n- footer\n- footericon\n- color\n- thumbnail\n- image\n- descriptionlength\n- footerlength\n- titlelength\n- totallength\n- type"
        },
        "getguildinvite": {
            "name": "$getGuildInvite",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getGuildInvite",
            "description": "Returns a guild invite of the current guild or of the guild of the provided guild ID (only if the bot has `create_invite` permission).",
            "usage": "$getGuildInvite\n$getGuildInvite[]\n$getGuildInvite[guildID]",
            "property": "Leave brackets empty to return a guild invite where the command is executed in. Same as no brackets.\n`guildID` - Returns a guild invite to the defined guild ID."
        },
        "getmessagevar": {
            "name": "$getMessageVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/getmessagevar",
            "description": "Returns the value of the provided channel variable in the current channel. You can provide a message ID in the 2nd field to get the variable value of a specific message.",
            "usage": "$getMessageVar[varName]\n$getMessageVar[varName;messageID]",
            "property": "`varName` - The variable being called in the command.\n`messageID` - The message ID attached to the variable."
        },
        "getrolecolor": {
            "name": "$getRoleColor",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getrolecolor",
            "description": "Returns the color of a role in hex form. 2nd field is optional to return the color of a role from the defined guild. Defaults to current guild.",
            "usage": "$getRoleColor[roleID]\n$getRoleColor[roleID;guildID]",
            "property": "`roleID` - Returns the color of the defined role.\n`guildID` - Returns the color of the defined role in the provided guild"
        },
        "getservervar": {
            "name": "$getServerVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/getservervar",
            "description": "Get the value of the provided server variable.",
            "usage": "$getServerVar[varName]\n$getServerVar[varName;guildID]",
            "property": "`varName` - The variable being called in the command.\n`guildID` - The guild ID of the variable being called. Defaults to current guild if none is defined."
        },
        "getslowmode": {
            "name": "$getSlowMode",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getslowmode",
            "description": "Returns the slowmode time for a channel in seconds. If no slowmode is set for the channel, the output will be `0`.",
            "usage": "$getSlowMode\n$getSlowMode[]\n$getSlowMode[channelID]",
            "property": "Leave brackets empty to return the current channel's slowmode. Same as no brackets.\n`channelID` - Returns the defined channel's slowmode."
        },
        "getuserbadges": {
            "name": "$getUserBadges",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/getuserbadges",
            "description": "Returns the badges of the command author or a given userID in text format.",
            "usage": "$getUserBadges\n$getUserBadges[]\n$getUserBadges[guildID]",
            "property": "Leave brackets empty to return the badges of the command author in text format.\n`userID` - Returns the badges of the supplied user ID in text format.\n \n__Outputs:__\nDISCORD_EMPLOYEE\nDISCORD_PARTNER\nHYPESQUAD_EVENTS\nBUGHUNTER_LEVEL_1\nBUGHUNTER_LEVEL_2\nHOUSE_BRAVERY\nHOUSE_BRILLIANCE\nHOUSE_BALANCE\nEARLY_SUPPORTER\nTEAM_USER\nSYSTEM\nVERIFIED_BOT\nVERIFIED_DEVELOPER"
        },
        "getuservar": {
            "name": "$getUserVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/getuservar",
            "description": "Returns the value of the provided user variable. This variable is not global and the value can only be retrieved from the user in the server the command is ran in.",
            "usage": "$getUserVar[varName]\n$getUserVar[varName;userID]",
            "property": "`varName` - The variable being called in the command.\n`userID` - The userID attached to the variable(You can omit this field to get the command authors variable value)."
        },
        "getvar": {
            "name": "$getVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/getvar",
            "description": "Returns the value of the provided global variable. You can provide a userID in the 2nd field to get the global variable value.",
            "usage": "$getVar[varName]\n$getVar[varName;userID]",
            "property": "`varName` - The variable being called in the command.\n`userID` - The userID attached to the global variable(You can omit this field to get the global variable value)."
        },
        "giverole": {
            "name": "$giveRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/giverole",
            "description": "Gives the defined role to a member of the defined guild. 4th field sets a reason and will be audited.",
            "usage": "$giveRole[roleID]\n$giveRole[roleID;userID]\n$giveRole[roleID;userID;guildID]\n$giveRole[roleID;userID;guildID;reason]",
            "property": "`roleID` - The ID of the role to add the to user.\n`userID` - The ID of the user to be given the role. Defaults to command author.\n`guildID` - The ID of the guild where the user and role is located. Defaults to current guild.\n`reason` - The reason for giving the role. Audits the reason. May be optional."
        },
        "globalban": {
            "name": "$globalBan",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/globalban",
            "description": "Bans the provided user ID from all servers the bot is in or all of the guilds defined by thier ID's.",
            "usage": "$globalBan[userID;reason]\n$globalBan[userID;reason;guildID;guildID;..etc]",
            "property": "`userID` - The ID of the user to ban.\n`reason` - The reason for the ban.\n`guildID` - The ID of the guild to ban the user from. Can be multiple ID's separated by semicolons. If no guild ID is defined, the `user` will be banned from all guilds the bot is in."
        },
        "globalcooldown": {
            "name": "$globalCooldown",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/globalcooldown",
            "description": "Similar to {hyper:$cooldown:https://docs.db-script.xyz/functions/limiters/cooldown} except it cools down the same command for the command author in all servers for the given time.",
            "usage": "$globalCooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond to the user again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown."
        },
        "globaluserleaderboard": {
            "name": "$globalUserLeaderboard",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/globaluserleaderboard",
            "description": "Returns a leaderboard for the specified global user variable in either an ascending or descending state.",
            "usage": "$globalUserLeaderboard[variable]\n$globalUserLeaderboard[variable;asc;placeholders]\n$globalUserLeaderboard[variable;desc;placeholders]",
            "property": "`variable` - The variable to display a leaderboard of.\n`asc` - Returns the data in an ascending state, from highest on top.\n`desc` - Returns the data in a descending state, from lowest on top.\n \nplaceholders:\n`{top}` - The value sitting in 1st place whether asc or desc\n`{value}` - The variables value.\n`{username}` - The username associated with that stat.\n`{id}` - The users ID associated with that stat.\n`{tag}` - The users tag associated with that stat."
        },
        "guild": {
            "name": "$guild",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/guild",
            "description": "A `Compact Function` that returns information relating to a guild your bot is in with `28` options to choose from.",
            "usage": "$guild[guildID;option]",
            "property": "`guildID` - Define a guild with the ID.\n`option` - Define the property by its name.\n \n__**Options:**__\n- acronym\n- afkchannelid\n- afktimeout\n- boostcount\n- boostlevel\n- contentfilter\n- count\n- created\n- description\n- emojicount\n- features\n- icon\n- id\n- isavailable\n- isbotremoved\n- ispartnered\n- isverified\n- membercount\n- mfalevel\n- name\n- region\n- ruleschannel\n- systemchannelid\n- timestamp\n- updateschannel\n- vanityurl\n- vanityuses\n- verificationlvl"
        },
        "guildavailable": {
            "name": "$guildAvailable",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildavailable",
            "description": "Returns `true` if a guild is available. Otherwise, function returns `false`. Pertains to guild outages.",
            "usage": "$guildAvailable\n$guildAvailable[]\n$guildAvailable[guildID]",
            "property": "Leave brackets empty to return the availability for the current guild. Same as no brackets.\n`guildID` - Supplying a guild ID will return the output of that server. "
        },
        "guildboostcount": {
            "name": "$guildBoostCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildboostcount",
            "description": "Returns the number of how many times the current or specific guild is boosted.",
            "usage": "$guildBoostCount\n$guildBoostCount[]\n$guildBoostCount[guildID]",
            "property": "Leave brackets empty to return the nitro boost count of the current server. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the nitro boost count of that server."
        },
        "guildboostlevel": {
            "name": "$guildBoostLevel",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildboostlevel",
            "description": "Returns the boost level/tier of the current or specific guild.",
            "usage": "$guildBoostLevel\n$guildBoostLevel[]\n$guildBoostLevel[guildID]",
            "property": "Leave brackets empty to return the nitro level of the current server. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the nitro level of that server."
        },
        "guildcategories": {
            "name": "$guildCategories",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildcategories",
            "description": "Returns the collection of categories in a guild. If guild has too many roles, the command with this function in it will not execute.",
            "usage": "$guildCategories\n$guildCategories[]\n$guildCategories[guildID]\n$guildCategories[guildID;option]\n$guildCategories[guildID;option;separator]",
            "property": "Leave brackets empty to return the categories of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guildID will get the categories of that server.\n`option` - Returns the categories with the specific option. Defaults to `name`.\n`separator` - Separates each category with the defined separator. Defaults to `, `.\n \n__**Options:**__\n`name` - The names of the set of categories.\n`id` - The IDs of the set of categories."
        },
        "guildchannels": {
            "name": "$guildChannels",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildchannels",
            "description": "Returns a collection of all the channels in a guild. If guild has too many channels, the command with this function in it will not execute.",
            "usage": "$guildChannels\n$guildChannels[]\n$guildChannels[guildID]\n$guildChannels[guildID;option]\n$guildChannels[guildID;option;separator]",
            "property": "Leave brackets empty to return the channels of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the channels of that server.\n`option` - Returns the channels with the specific option. Defaults to name.\n`separator` - Separates each channel with the defined separator. Defaults to `, `.\n \n__**Options:**__\n`name` - The names of the set of channels.\n`mention` - The set of channels formatted into their mention forms.\n`id` - The IDs of the set of channels."
        },
        "guildcontentfilter": {
            "name": "$guildContentFilter",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildcontentfilter",
            "description": "Returns the explicit content filter of the current guild or a specific guild the bot is in.",
            "usage": "$guildContentFilter\n$guildContentFilter[]\n$guildContentFilter[guildID]",
            "property": "Leave brackets empty to return the explicit content filter of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the explicit content filter of that server."
        },
        "guildcooldown": {
            "name": "$guildCooldown",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/guildcooldown",
            "description": "Adds a cooldown to the command in the current server. The same cooldown will not affect other servers.",
            "usage": "$guildCooldown[time;error]",
            "property": "`time` - Time it takes for the bot to respond to the user again.\n`error` - Error message if the user tries to use the command within the cooldown period.\n`{time}` - Include this in your error message to make the bot respond with how long is left in the cooldown."
        },
        "guildcount": {
            "name": "$guildCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildcount",
            "description": "Returns the amount of guilds your bot is in.",
            "usage": "$guildCount"
        },
        "guildemojis": {
            "name": "$guildEmojis",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildemojis",
            "description": "Returns the collection of emojis in a guild. If guild has too many emojis, the command with this function in it will not execute.",
            "usage": "$guildEmojis\n$guildEmojis[]\n$guildEmojis[guildID]\n$guildEmojis[guildID;option]\n$guildEmojis[guildID;option;separator]",
            "property": "Leave brackets empty to return the emojis of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the emojis of that server.\n`option` - Returns the emojis with the specific option. Defaults to `emoji`.\n`separator` - Separates each emoji with the defined separator. Defaults to `, `.\n \n__**Options:**__\n`name` - The names of the set of emojis.\n`id` - The IDs of the set of emojis.\n`emoji` - The physical set of emojis."
        },
        "guildfeatures": {
            "name": "$guildFeatures",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildfeatures",
            "description": "Returns the features of the current or specific guild (if any).",
            "usage": "$guildFeatures\n$guildFeatures[]\n$guildFeatures[guildID]",
            "property": "Leave brackets empty to return the guild features of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the features of that guild.\n \n__**Results:**__\nANIMATED_ICON\nBANNER\nCOMMERCE\nCOMMUNITY\nDISCOVERABLE\nFEATURABLE\nINVITE_SPLASH\nMEMBER_VERIFICATION_GATE\nNEWS\nPARTNERED\nPREVIEW_ENABLED\nRELAY_ENABLED\nVANITY_URL\nVERIFIED\nVIP_REGIONS\nWELCOME_SCREEN_ENABLED"
        },
        "guildicon": {
            "name": "$guildIcon",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildicon",
            "description": "Returns the icon of the current guild or provided guild ID.",
            "usage": "$guildIcon\n$guildIcon[]\n$guildIcon[guildID]",
            "property": "Leave brackets empty to return the icon of the current guild. Same as no brackets.\n`guildID` - Returns the icon of that specific guild."
        },
        "guildid": {
            "name": "$guildID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildid",
            "description": "Returns the current guild's ID or of the supplied guild name.",
            "usage": "$guildID\n$guildID[]\n$guildID[guildname]",
            "property": "Leave brackets empty to return the guildID of where the command is ran. Same as no brackets.\n`guildname` - Supply a guild name to return the guildID of that server."
        },
        "guildleaderboard": {
            "name": "$guildLeaderboard",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildleaderboard",
            "description": "Shows a leaderboard of guilds for the specified variable in either an ascending or descending state.",
            "usage": "$guildLeaderboard[variable]\n$guildLeaderboard[variable;asc;placeholders]\n$guildLeaderboard[variable;desc;placeholders]",
            "property": "`variable` - The variable to display a leaderboard of.\n`asc` - Returns the data in an ascending state, from highest on top.\n`desc` - Returns the data in a descending state, from lowest on top.\n \n__Placeholders:__\n`{top}` - The value sitting in 1st place whether asc or desc.\n`{value}` - The variables value.\n`{username}` - The username associated with that stat.\n`{id}` - The users ID associated with that stat.\n`{tag}` - The users tag associated with that stat."
        },
        "guildname": {
            "name": "$guildName",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildname",
            "description": "Returns the guild name of the current guild or the provided guild ID.",
            "usage": "$guildName\n$guildName[]\n$guildName[guildID]",
            "property": "Leave brackets empty to return the name of the current guild. Same as no brackets.\n`guildID` - Returns the server name of the specific guild ID."
        },
        "guildroles": {
            "name": "$guildRoles",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildroles",
            "description": "Returns the collection of roles in a guild. If guild has too many roles, the command with this function in it will not execute.",
            "usage": "$guildRoles\n$guildRoles[]\n$guildRoles[guildID]\n$guildRoles[guildID;option]\n$guildRoles[guildID;option;separator]",
            "property": "Leave brackets empty to return the roles of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the roles of that server.\n`option` - Returns the roles with the specific option. Defaults to id.\n`separator` - Separates each role with the defined separator. Defaults to `, `.\n \n__**Options:**__\n`name` - The names of the set of roles.\n`mention` - The set of roles formatted into their mention forms.\n`id` - The IDs of the set of roles."
        },
        "guildruleschannel": {
            "name": "$guildRulesChannel",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildruleschannel",
            "description": "Returns the rules channel ID of the current guild or specific guild ID (If no rules channel is found, bot will return `undefined`).",
            "usage": "$guildRulesChannel\n$guildRulesChannel[]\n$guildRulesChannel[guildID]",
            "property": "Leave brackets empty to return the rules channel of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the rules channel of that guild."
        },
        "guildupdateschannel": {
            "name": "$guildUpdatesChannel",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildupdateschannel",
            "description": "Returns the updates channel ID of the current guild or specific guild ID (If no updates channel is found, bot will return `undefined`)",
            "usage": "$guildUpdatesChannel\n$guildUpdatesChannel[]\n$guildUpdatesChannel[guildID]",
            "property": "Leave brackets empty to return the updates channel of the current guild. Same as no brackets.\n`guildID` - Supplying a specific guild ID will get the updates channel of that guild."
        },
        "guildvanityurl": {
            "name": "$guildVanityURL",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildvanityurl",
            "description": "Returns the vanity URL code of the current guild or of the guild of the provided guild ID. Returns `undefined` if no vanity is found.",
            "usage": "$guildVanityURL[guildID]",
            "property": "`guildID` - Supply a guild ID to return the vanity URL (if they have one)"
        },
        "guildvanityuses": {
            "name": "$guildVanityUses",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildvanityuses",
            "description": "Returns the amount of times a vanity URL code has been used. Returns `undefined` if no guild or vanity is found.",
            "usage": "$guildVanityUses[guildID]",
            "property": "`guildID` - Supply a guild ID to return the total vanity URL uses (if they have one)"
        },
        "guildverificationlvl": {
            "name": "$guildVerificationLvl",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/guildverificationlvl",
            "description": "Returns the guild's verification level or a specific guild the bot is in. Returns `undefined` if no guild is found.",
            "usage": "$guildVerificationLvl\n$guildVerificationLvl[]\n$guildVerificationLvl[guildID]",
            "property": "Leave brackets empty to get the verification level of the current guild. Same as no brackets.\ns`guildID` - Supplying a specific guild ID will get the verification level of that guild."
        },
        "hasanyrole": {
            "name": "$hasAnyRole",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/hasanyrole",
            "description": "Checks if the user has any one of the defined roles in the check. Returns `true` if the user has at least one role. Returns `false` if the user doesn't have any of them.",
            "usage": "$hasAnyRole[userID;roleID;roleID;...etc]",
            "property": "`userID` - Define the user with thier ID.\n`roleID` - Define the roleID(s) for checking if the user has."
        },
        "hasattachment": {
            "name": "$hasAttachment",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/hasattachment",
            "description": "Returns `true` if the message has an attachment. Otherwise, function returns `false`.",
            "usage": "$hasAttachment"
        },
        "hasperm": {
            "name": "$hasPerm",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/hasperm",
            "description": "Checks if the user has all of the provided permissions. Returns `true` of the user has all of the permissions in the check. Otherwise the function returns `false`.",
            "usage": "$hasPerm[userID;perm]\n$hasPerm[userID;perm;perm;etc...]",
            "property": "`userID` - The ID of a user to be checked.\n`perm` - The permission(s) to check for. Can check for multiple permissions separated by semi-colons.\n \n__**Available Permissions:**__\nadmin\nkick\nban\nmanageserver\nmanagemessages\nmanagenicknames\nviewauditlogs\nviewinsights\nmanageroles\nmanagechannels\nmanageemojis\nmanagewebhooks\ncreateinvite\nsendmessages\nsendtts\nreadhistory\nviewchannels\nattachfiles\nembedlinks\nchangenickname\naddreactions\nexternalemojis\nmentioneveryone\n \n__**Voice permissions**__\npriorityspeaker\nvideo\nconnect\nspeak\nmutemembers\ndeafenmembers\nmovemembers"
        },
        "hasrole": {
            "name": "$hasRole",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/hasrole",
            "description": "If the user has the role in the defined guild, function returns `true`. Otherwise the function return `false`.",
            "usage": "$hasRole[roleID]\n$hasRole[roleID;userID]\n$hasRole[roleID;userID;guildID]",
            "property": "`userID` - The user being checked.\n`roleID` - The role being checked.\n`guildID` - The guild where the user and role is being checked."
        },
        "hasroles": {
            "name": "$hasRoles",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/hasroles",
            "description": "Returns `true` if the user has all the role(s) in the defined guild. Otherwise the function returns `false`.",
            "usage": "$hasRoles[userID;guildID;roleID]\n$hasRoles[userID;guildID;roleID;roleID;etc...]",
            "property": "`userID` - The user being checked.\n`guildID` - The guild where the user and role is being checked.\n`roleID` - The role(s) being checked."
        },
        "haste": {
            "name": "$haste",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/haste",
            "description": "Returns a hastebin.txt link of the provided content.",
            "usage": "$haste[content]",
            "property": "`content` - The message or content going into a hastebin.txt link\n \n \nMust install `hastebin-gen` to use this function!```\nnpm install hastebin-gen\n```"
        },
        "highestrole": {
            "name": "$highestRole",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/highestrole",
            "description": "Returns the highest role id of server or provided user ID.",
            "usage": "$highestRole\n$highestRole[]\n$highestRole[userID]\n$highestRole[userID;guildID]",
            "property": "Leave brackets empty to return the highest role of the user who executed the command. No brackets will return the highest role in the guild.\n`userID` - Returns the highest role of the specific user.\n`guild` - Returns the highest role of the specific user in the specific guild."
        },
        "hostbattery": {
            "name": "$hostBattery",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/hostbattery",
            "description": "A `Compact Function` resolving data about your hosts battery (If applicable) with `14` options to choose from.",
            "usage": "$hostBattery[option]",
            "property": "`option` - The data option.\n \n__**Options:**__\n- capacityunit\n- current\n- cyclecount\n- designedmax\n- hasbattery\n- ischarging\n- ispluggedin\n- manufacturer\n- max\n- model\n- percent\n- timeremaining\n- type\n- voltage"
        },
        "hostcpu": {
            "name": "$hostCPU",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/hostcpu",
            "description": "A `Compact Function` resolving data about your hosts CPU Processor with `16` options to choose from.",
            "usage": "$hostCPU[option]",
            "property": "`option` - The data option.\n \n__**Options:**__\n- avgload\n- avgspeed\n- brand\n- cache\n- cores\n- currentload\n- manufacturer\n- maxspeed\n- minspeed\n- model\n- physicalcores\n- processors\n- socket\n- vendor\n- virtualization\n- voltage"
        },
        "hostdisk": {
            "name": "$hostDisk",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/hostdisk",
            "description": "A `Compact Function` resolving data about your hosts Disk Drive with `21` options to choose from.",
            "usage": "$hostDisk[option]",
            "property": "`option` - The data option.\n \n__**Options:**__\n- available\n- bytespersector\n- cylindersperhead\n- firmwareversion\n- fstype\n- isremovable\n- name\n- percentused\n- physical\n- sectorspertrack\n- serialnumber\n- size\n- status\n- storagetype\n- totalcylinders\n- totalheads\n- totalsectors\n- totaltracks\n- trackspercylinder\n- type\n- used"
        },
        "hostos": {
            "name": "$hostOS",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/hostos",
            "description": "A `Compact Function` resolving data about your hosts Operating System with `6` options to choose from.",
            "usage": "$hostOS[option]",
            "property": "`option` - The data option.\n \n__**Options:**__\n- arch\n- build\n- distro\n- hostname\n- kernel\n- platform"
        },
        "hostram": {
            "name": "$hostRAM",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/hostram",
            "description": "A `Compact Function` resolving data about your hosts RAM with `10` options to choose from.",
            "usage": "$hostRAM[option]",
            "property": "`option` - The data option.\n \n__**Options:**__\n- clockspeed\n- free\n- freeswap\n- manufacturer\n- total\n- totalswap\n- used\n- usedswap\n- voltmax\n- voltmin"
        },
        "hour": {
            "name": "$hour",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/hour",
            "description": "Returns the current hour of the day.",
            "usage": "$hour"
        },
        "if": {
            "name": "$If",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/if",
            "description": "If conditions meet in the 1st field, the code or message in the 2nd field will be executed.",
            "usage": "$If[condition;execute]",
            "property": "`condition` - The condition for the code to be executed. This field kind of acts like {hyper:$onlyIf:https://docs.db-script.xyz/functions/limiters/onlyif}.\n`execute` - If condition meets, this field will execute code or a message."
        },
        "image": {
            "name": "$image",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/image",
            "description": "Returns an embedded image of the provided image URL.",
            "usage": "$image[url]",
            "property": "`url` - The URL link to an image."
        },
        "indexoftextsplit": {
            "name": "$indexOfTextSplit",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/indexoftextsplit",
            "description": "Returns the index value of the content in {hyper:$textSplit:https://docs.db-script.xyz/functions/data/textsplit}. Returns `undefined` if an index doesn't match.",
            "usage": "$indexOfTextSplit[value]",
            "property": "`value` - The text value to match in the {hyper:$textSplit:https://docs.db-script.xyz/functions/data/textsplit}."
        },
        "infofromguilds": {
            "name": "$infoFromGuilds",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/infofromguilds",
            "description": "Returns information about a number of guilds your bot is in. If the field is left blank, it will get info on `10` guilds by default.",
            "usage": "$infoFromGuilds[guildID;placeholders]",
            "property": "`guildID` - The ID of a cached guild to return data from.\n`placeholders` - The placeholders to define the extracted data.\n \n__**Placeholders:**__\n`{memory}` - The memory (RAM) taken up by the defined guild.\n`{name}` - The name of the defined guild.\n`{id}` - The ID of the defined guild.\n`{members}` - How many members in the guild.\n`{owner}` - The owner of the guild."
        },
        "inviteinfo": {
            "name": "$inviteInfo",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/inviteinfo",
            "description": "Returns information about a guild invite with many options.",
            "usage": "$inviteInfo[inviteURL;option]",
            "property": "`inviteURL` - Supplying an invite link or just the code.\n`option` -  Supply 1 option to return the info from the link."
        },
        "isboolean": {
            "name": "$isBoolean",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/activity",
            "description": "Returns `true` if the input content is a boolean. Otherwise, the function returns `false`.",
            "usage": "$isBoolean[input]",
            "property": "`input` - The content to check for booleans.\n \n__**Booleans:**__\n- true\n- false\n- yes\n- no\n- on\n- off"
        },
        "isbanned": {
            "name": "$isBanned",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isbanned",
            "description": "Returns `true` if the user is banned from the server where the command is executed. Otherwise the functions returns `false`.",
            "usage": "$isBanned[userID]\n$isBanned[userID;guildID]",
            "property": "`userID` - ID of the user being checked for server ban status.\n`guildID` - Guild ID of where the user user is being checked for server ban status."
        },
        "isboosting": {
            "name": "$isBoosting",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isboosting",
            "description": "Returns `true` if the userID in the provided field is boosting the server where the command is ran. Otherwise, the function returns `false`.",
            "usage": "$isBoosting\n$isBoosting[]\n$isBoosting[userID]\n$isBoosting[userID;guildID]",
            "property": "Leave brackets empty to return if the command author is boosting. Same as no brackets.\n`userID` - The ID of the user being checked for boosting the guild.\n`guildID` - The guild being checked for boosting status."
        },
        "isbot": {
            "name": "$isBot",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isbot",
            "description": "Returns `true` if the given ID is a bot. If the given ID is a human, the bot will return `false`.",
            "usage": "$isBot\n$isBot[]\n$isBot[userID]",
            "property": "Leave brackets empty to return if the command author is a bot. Same as no brackets.\n`userID` - The ID of the user/bot"
        },
        "iscategory": {
            "name": "$isCategory",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/iscategory",
            "description": "Returns `true` if the content is a channel category that the bot can see. Otherwise, function returns `false`.",
            "usage": "$isCategory[ID]",
            "property": "`ID` - The ID of a category or not."
        },
        "iscustomemoji": {
            "name": "$isCustomEmoji",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/iscustomemoji",
            "description": "Returns `true` if the content is a custom emoji. Otherwise, function returns `false`.",
            "usage": "$isCustomEmoji[emoji]",
            "property": "`emoji` - Supply the content to check for custom emoji."
        },
        "isembed": {
            "name": "$isEmbed",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isembed",
            "description": "Returns `true` if the message contains embeds. Otherwise the function returns `false`.",
            "usage": "$isEmbed[channelID;messageID]",
            "property": "`channelID` - The channel ID where the message is. Gets current channel if left blank.\n`messageID` - The message ID of the message being checked."
        },
        "isemoji": {
            "name": "$isEmoji",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isemoji",
            "description": "Returns `true` if the content is a default emoji. Otherwise, function returns `false`.",
            "usage": "$isEmoji[emoji]",
            "property": "`emoji` - Supply the content to check for default emoji."
        },
        "iseveryonementioned": {
            "name": "$isEveryoneMentioned",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/iseveryonementioned",
            "description": "Returns `true` if @everyone is used in the message. Otherwise, function returns `false`.",
            "usage": "$isEveryoneMentioned\n$isEveryoneMentioned[content]",
            "property": "`content` - The content the bot will read while looking for @everyone mentions. If no brackets are used, the function will look thru arguments in the command/message."
        },
        "isguildverified": {
            "name": "$isGuildVerified",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isguildverified",
            "description": "Returns `true` if the guild is verified by Discord. Otherwise the function returns `false`.",
            "usage": "$isGuildVerified\n$isGuildVerified[]\n$isGuildVerified[guildID]",
            "property": "Leave brackets empty to return the current guild ID where the command is executed. Same as no brackets.\n`guildID` - The guild ID of the server being checked."
        },
        "isherementioned": {
            "name": "$isHereMentioned",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isherementioned",
            "description": "Returns `true` if @here is used in the message. Otherwise, bot returns `false`.",
            "usage": "$isHereMentioned\n$isHereMentioned[content]",
            "property": "`content` - The content the bot will read while looking for @here mentions. If no brackets are used, the function will look thru arguments in the command/message."
        },
        "ishoisted": {
            "name": "$isHoisted",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/ishoisted",
            "description": "Returns `true` if the role is hoisted. Otherwise, the function returns `false`.",
            "usage": "$isHoisted[roleID]\n$isHoisted[roleID;guildID]",
            "property": "`roleID` - The role ID of the role being check for being hoisted.\n`guildID` - The ID of the guild where the role is located. Defaults to current guild."
        },
        "ismentionable": {
            "name": "$isMentionable",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/ismentionable",
            "description": "Returns `true` if the role is mentionable. Otherwise, the function returns `false`.",
            "usage": "$isMentionable[roleID]\n$isMentionable[roleID;guildID]",
            "property": "`roleID` - The role ID of the role being checked for being mentionable.\n`guildID` - The guild ID that the specified role is in."
        },
        "isnegativenumber": {
            "name": "$isNegativeNumber",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isnegativenumber",
            "description": "Returns `true` if the number is negative. Returns `false` if the number is in the positives. Returns `undefined` if the input is not a number.",
            "usage": "$isNegativeNumber[number]",
            "property": "`number` - The number being checked to see if it's a negative number"
        },
        "isnsfw": {
            "name": "$isNSFW",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isnsfw",
            "description": "Returns `true` if the current channel or given channelID is an NSFW channel. Otherwise, bot returns `false`.",
            "usage": "$isNSFW\n$isNSFW[]\n$isNSFW[channelID]",
            "property": "Leave brackets empty to return the current channel's NSFW status. Same as no brackets.\n`channelID` - The ID of the channel being checked."
        },
        "isnumber": {
            "name": "$isNumber",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isnumber",
            "description": "Returns `true` if the input content is a number. Otherwise, the function returns `false`.",
            "usage": "$isNumber[input]",
            "property": "`input` - The content the function will check."
        },
        "ispaused": {
            "name": "$isPaused",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/ispaused",
            "description": "Returns `true` if the song is paused. Returns `false` if the bot is not playing any audio or if the song is not paused. Returns `undefined` if the bot is not connected to a voice channel.",
            "usage": "$isPaused"
        },
        "ispinned": {
            "name": "$isPinned",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/ispinned",
            "description": "Returns `true` if the message has been pinned to a channel in a guild the bot can see. Otherwise, the function returns `false`.",
            "usage": "$isPinned[channelID;messageID]",
            "property": "`channelID` - Channel ID of the channel where the message is located.\n`messageID` - Message ID of the message being checked for being pinned to the channel."
        },
        "isstring": {
            "name": "$isString",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isstring",
            "description": "Returns `true` if the content input is anything but a number. Otherwise, the function returns `false`. The complete opposite of {hyper:$isNumber:https://docs.db-script.xyz/functions/conditions/isnumber}.",
            "usage": "$isString[input]",
            "property": "`input` - The content to check"
        },
        "isuserdmenabled": {
            "name": "$isUserDMEnabled",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isuserdmenabled",
            "description": "Returns `true` if the users DMs are open. Otherwise, the function returns `false`.",
            "usage": "$isUserDMEnabled\n$isUserDMEnabled[]\n$isUserDMEnabled[userID]",
            "property": "Leave the brackets empty for automatic DM status of command user. Same as no brackets.\n`userID` - Supply a user ID to return DM status of that user."
        },
        "isuseringuild": {
            "name": "$isUserInGuild",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isuseringuild",
            "description": "Returns `true` if the user is in the defined guild. Returns `false` if the user cannot be found in the guild. Similar to {hyper:$userExists:https://docs.db-script.xyz/functions/conditions/userexists} but for specifying a guild.",
            "usage": "$isUserInGuild[userID;guildID]",
            "property": "`userID` - Supply the user ID.\n`guildID` - Supply the guild ID where the user is being checked."
        },
        "isvalidhex": {
            "name": "$isValidHex",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isvalidhex",
            "description": "Returns `true` if the message is a valid hex color. Otherwise, function returns `false`.",
            "usage": "$isValidHex[#hex-code]",
            "property": "`input` - The content the function will check."
        },
        "isvalidimageurl": {
            "name": "$isValidImageURL",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isvalidimageurl",
            "description": "Returns `true` if the URL is and image formatted URL. Otherwise, function returns `false`.",
            "usage": "$isValidImageURL[URL]",
            "property": "`URL` - Supply a URL."
        },
        "isvalidinvite": {
            "name": "$isValidInvite",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isvalidinvite",
            "description": "Returns `true` if the server invite link is valid or exists. Otherwise, function returns `false`.",
            "usage": "$isValidInvite[invite]",
            "property": "`invite` - A server invite link or code."
        },
        "isvalidurl": {
            "name": "$isValidURL",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/isvalidurl",
            "description": "Returns `true` if the content is a valid URL. Otherwise, function returns `false`.",
            "usage": "$isValidURL[URL]",
            "property": "`URL` - Supply a URL."
        },
        "italic": {
            "name": "$italic",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/italic",
            "description": "Italicizes the message content.",
            "usage": "$italic[input]",
            "property": "input - The content input to italicize."
        },
        "kick": {
            "name": "$kick",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/kick",
            "description": "Kicks the given userID. You can also add an optional reason.",
            "usage": "$kick[userID]\n$kick[userID;reason]",
            "property": "`userID` - The userID of the user being kicked.\n`reason` - The reason for the user being kick."
        },
        "lastarg": {
            "name": "$lastArg",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lastarg",
            "description": "Returns the very last argument in the message.",
            "usage": "$lastArg"
        },
        "lastmessagechannelid": {
            "name": "$lastMessageChannelID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lastmessagechannelid",
            "description": "Returns the channel ID location of the last message sent by a user.",
            "usage": "$lastMessageChannelID\n$lastMessageChannelID[]\n$lastMessageChannelID[userID]",
            "property": "Leave the brackets empty to return data for the command author. Same as no brackets.\n`userID` - Returns data from the provided user ID."
        },
        "lastmessageid": {
            "name": "$lastMessageID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lastmessageid",
            "description": "Returns the message ID of the last message sent by a user.",
            "usage": "$lastMessageID\n$lastMessageID[]\n$lastMessageID[userID]",
            "property": "Leave the brackets empty to return data for the command author. Same as no brackets\n`userID` - Returns data from the provided user ID."
        },
        "lastmessageurl": {
            "name": "$lastMessageURL",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lastmessageurl",
            "description": "Returns the message URL link of the last message sent by a user.",
            "usage": "$lastMessageURL\n$lastMessageURL[]\n$lastMessageURL[userID]",
            "property": "Leave brackets empty to return data for the command author. Same as no brackets.\n`userID` - Returns data from the provided user ID."
        },
        "let": {
            "name": "$let",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/let",
            "description": "Assigns data to a temporary variable that can be changed and retrieved later in the command. Similar to {hyper:$setVar:https://docs.db-script.xyz/functions/variables/setvar} but variable data only saves per command execution instead of assigned permanently.",
            "usage": "$let[variable;value]",
            "property": "`variable` - Define a variable with a name. The data value will be recovered using this name.\n`value` - Define the variable with a value."
        },
        "log": {
            "name": "$log",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/log",
            "description": "Logs the provided content in the console and/or sends it in the channel if the 2nd field is defined as `return` or `send`.",
            "usage": "$log[content]\n$log[content;return/send]",
            "property": "`content` - The content to be logged on the console. Can log responses of full code\n`return/send` - If 2nd field is labeled `return` or `send`, the function will return the logged data to the channel as well. "
        },
        "loopqueue": {
            "name": "$loopQueue",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/loopqueue",
            "description": "If the input is defined as `yes`, the function will repeat the queue when all songs are finished playing. If the input is defined as `no` the function will not repeat the queue.",
            "usage": "$loopQueue[yes]\n$loopQueue[no]",
            "property": "`yes` - Means the bot will repeat the queue when it is finished playing.\n`no` - Means the bot will not repeat the queue when it is finished playing."
        },
        "loopsong": {
            "name": "$loopSong",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/loopsong",
            "description": "If the input is defined as `yes`, the function will repeat the currently playing song. If the input is defined as `no` the function will not repeat the currently playing song.",
            "usage": "$loopSong[yes]\n$loopSong[no]",
            "property": "`yes` - Means the bot will repeat the song when it is finished playing.\n`no` - Means the bot will not repeat the song when it is finished playing and the next song in the queue will play."
        },
        "lowercasecount": {
            "name": "$lowercaseCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lowercasecount",
            "description": "Returns the amount of lowercase characters in the content",
            "usage": "$lowercaseCount[input]",
            "property": "`input` - The content to count."
        },
        "lowestrole": {
            "name": "$lowestRole",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/lowestrole",
            "description": "Returns the lowest role id of a guild or provided user ID.",
            "usage": "$lowestRole\n$lowestRole[]\n$lowestRole[userID]\n$lowestRole[userID;guildID]",
            "property": "Leave brackets empty to return the lowest role of the user who executed the command. No brackets will return the lowest role in the guild.\n`userID` - Returns the lowest role of the specific user.\n`guildID` - Searches specified guld for the lowest role of the specific user."
        },
        "massrole": {
            "name": "$massRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/massrole",
            "description": "Adds or removes the defined role to all members positioned below the bot in the guild the command is executed in. Each role being takes about 2 seconds per user to execute.",
            "usage": "$massRole[add;roleID]\n$massRole[remove;roleID]",
            "property": "`add` - Adds the defined role to every user below the position of the bot.\n`remove` - Removes the defined role from every user below the position of the bot.\n`roleID` - The ID of the role to add or remove."
        },
        "max": {
            "name": "$max",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/max",
            "description": "Returns the largest number out of the numbers defined in the function.",
            "usage": "$max[number;number]\n$max[number;number;...etc]",
            "property": "`number` - The number(s) to evaluate."
        },
        "member": {
            "name": "$member",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/member",
            "description": "A `Compact Function` resolving data about a guild member with `20` options.",
            "usage": "$member[userID;guildID;option]",
            "property": "`userID` - Define a member of a guild with their user ID.\n`guildID` - Define the guild where you are getting the data from.\n`option` - Define the property by its name.\n \n__**Options:**__\n- boostcount\n- boostdate\n- booststamp\n- exists\n- guildid\n- guildname\n- hexcolor\n- id\n- isbannable\n- isbelowbot\n- isboosting\n- iskickable\n- joindate\n- joinstamp\n- mention\n- nickname\n- presence\n- rolecount\n- tag\n- username"
        },
        "memberexists": {
            "name": "$memberExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/memberexists",
            "description": "Returns `true` if the ID of the defined member exists in the defined guild or the guild the command is executed in. Otherwise, the function returns `false`.",
            "usage": "$memberExists[userID]\n$memberExists[userID;guildID]",
            "property": "`userID` - The ID of the member being checked.\n`guildID` - The ID of the guild being checked."
        },
        "memberrolecount": {
            "name": "$memberRoleCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/memberrolecount",
            "description": "Retrieves the number a roles the defined user has in the current or provided guild.",
            "usage": "$memberRoleCount[userID]\n$memberRoleCount[userID;guildID]",
            "property": "Returns the number a roles the defined user has in the defined guild or in the guild the command is executed in."
        },
        "memberroles": {
            "name": "$memberRoles",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/memberroles",
            "description": "Returns the names of all the roles of a user in the guild. If the 2nd field is defined as `mention`, the function will return the group of roles as mentioned instead of the names.",
            "usage": "$memberRoles[userID]\n$memberRoles[userID;guildID]\n$memberRoles[userID;guildID;mention]\n$memberRoles[userID;mention]",
            "property": "Returns the names of all the roles of a user in the guild. If the 2nd field is defined as `mention`, the function will return the group of roles as mentioned instead of the names."
        },
        "memberscount": {
            "name": "$membersCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/memberscount",
            "description": "Returns the number of members that are in the server with the supplied presence.",
            "usage": "$membersCount\n$membersCount[]\n$membersCount[presence]\n$membersCount[presence;guildID]",
            "property": "Leave brackets empty to return the total amount of members in the guild the command is executed in. Same as no brackets.\n`presence` - One of the presence values to return the value of.\n`guildID` - The ID of the guild to return the data from.\n \n__**Presence Values:**__\nonline\noffline\nidle\ndnd\nbot\nhuman"
        },
        "memory": {
            "name": "$memory",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/memory",
            "description": "Returns the total amount of memory (ram) your bot is using in all guilds or in one specific guild.",
            "usage": "$memory\n$memory[]\n$memory[guildID]",
            "property": "Leave brackets empty to return the RAM usage of the guild the command is executed is.\n`guildID` - The ID of the guild to return the RAM usage from."
        },
        "mentioned": {
            "name": "$mentioned",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentioned",
            "description": "Returns the ID of a mentioned user.",
            "usage": "$mentioned[argNumber]\n$mentioned[argNumber;yes]",
            "property": "`argNumber` - Represents the mentioned argument position.\n`yes` - If the 2nd field is defined as yes and no mentions are found in the command message, the function returns the ID of the command author."
        },
        "mentionedchannelcount": {
            "name": "$mentionedChannelCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedchannelcount",
            "description": "Returns the amount of channel mentions used in the message or command. Useful for anti spam.",
            "usage": "$mentionedChannelCount[content]",
            "property": "`content` - The content the bot will read while looking for channel mentions."
        },
        "mentionedchannels": {
            "name": "$mentionedChannels",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedchannels",
            "description": "Returns the ID of a mentioned channel, similar to the {hyper:$mentioned:https://docs.db-script.xyz/functions/data/mentioned} function but pertains to channel mentions.",
            "usage": "$mentionedChannels[argNumber]\n$mentionedChannels[argNumber;yes]",
            "property": "`argNumber` - Represents the mentioned argument position.\n`yes` - If the 2nd field is defined as yes and no mentions are found in the command message, the function returns the ID of the channel where the command was executed."
        },
        "mentionedeveryonecount": {
            "name": "$mentionedEveryoneCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedeveryonecount",
            "description": "Returns the number of times @everyone is used in the message.",
            "usage": "$mentionedEveryoneCount\n$mentionedEveryoneCount[content]",
            "property": "`content` - The content the bot will read while looking for @everyone mentions. If no brackets are used, the function will look thru arguments in the command/message."
        },
        "mentionedherecount": {
            "name": "$mentionedHereCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedherecount",
            "description": "Returns the number of times @here is used in the message.",
            "usage": "$mentionedHereCount\n$mentionedHereCount[content]",
            "property": "`content` - The content the bot will read while looking for @here mentions. If no brackets are used, the function will look thru arguments in the command/message."
        },
        "mentionedrolecount": {
            "name": "$mentionedRoleCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedrolecount",
            "description": "Returns the amount of role mentions used in the message or command. Useful for anti spam.",
            "usage": "$mentionedRoleCount[content]",
            "property": "`content` - The content the bot will read while looking for role mentions."
        },
        "mentionedroles": {
            "name": "$mentionedRoles",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedroles",
            "description": "Returns the ID of a mentioned role.",
            "usage": "$mentionedRoles[argNumber]",
            "property": "`argNumber` - Represents the mentioned argument position."
        },
        "mentionedusercount": {
            "name": "$mentionedUserCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/mentionedusercount",
            "description": "Returns the amount of user mentions used in the message or command. Useful for anti spam.",
            "usage": "$mentionedUserCount[content]",
            "property": "`content` - The content the bot will read while looking for user mentions."
        },
        "message": {
            "name": "$message",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/message",
            "description": "Returns arguments in the message/command, if you define args it will send the chosen message(s).",
            "usage": "$message[]\n$message[last]\n$message[argNumber]",
            "property": "Leave brackets empty to return everything in the command/message.\n`last` - Returns the last argument. Same as {hyper:$lastArg:https://docs.db-script.xyz/functions/data/lastarg}.\n`argNumber` - The argument(word) to return from the command or message."
        },
        "messageauthorid": {
            "name": "$messageAuthorID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/messageauthorid",
            "description": "Returns the ID of a user that sent the defined message. Provide the channel ID and message ID.",
            "usage": "$messageAuthorID[channelID;messageID]",
            "property": "`channelID` - Channel ID of where the message ID is located.\n`messageID` - The message ID in the channel corresponding with the inputted channel ID."
        },
        "messageexists": {
            "name": "$messageExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/messageexists",
            "description": "Returns `true` if the message exists in the defined channel. Otherwise, function returns `false`.",
            "usage": "$messageExists[channelID;messageID]",
            "property": "`channelID` - The channel location of the message.\n`messageID` - The message ID of the message."
        },
        "messageid": {
            "name": "$messageID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/messageid",
            "description": "Returns the message ID of the command that was executed.",
            "usage": "$messageID"
        },
        "messagepin": {
            "name": "$messagePin",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/messagepin",
            "description": "Pins a message and optionally returns data about the message being pinned.",
            "usage": "$messagePin[channelID;messageID]\n$messagePin[channelID;messageID;option]",
            "property": "`channelID` - The ID of the channel where the message is located.\n`messageID` - The ID of the message being pinned.\n`option` - Optional data for the bot to return upon pinning a message.\n \n__**Options:**__\nid\nurl\ncontent\nauthor\nchannel\n```You can omit the 3rd field or leave it blank to return nothing and just simply pin the message.```"
        },
        "messageslice": {
            "name": "$messageslice",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/messageslice",
            "description": "Slices out defined arguments and returns everything else in the command/message.",
            "usage": "$messageSlice[number]\n$messageSlice[>number]\n$messageSlice[<number]\n$messageSlice[-number]",
            "property": "`number` - Slices out everything and only returns the data in the defined argument.\n`>number` - Slices out the arguments before the argument number and returns everything after.\n`<number` - Slices out the arguments after the argument number and returns everything before.\n`-number` - Slices out the defined argument and returns everything else."
        },
        "messageunpin": {
            "name": "$messageUnpin",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/messageunpin",
            "description": "Unpins a message and optionally returns data about the message being unpinned.",
            "usage": "$messageUnpin[channelID;messageID]\n$messageUnpin[channelID;messageID;option]",
            "property": "`channelID` - The ID of the channel where the message is located.\n`messageID` - The ID of the message being unpinned.\n`option` - Optional data for the bot to return upon unpinning a message.\n \n__**Options:**__\nid\nurl\ncontent\nauthor\nchannel\n```You can omit the 3rd field or leave it blank to return nothing and just simply unpin the message.```"
        },
        "min": {
            "name": "$min",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/min",
            "description": "Returns the smallest number out of the numbers defined in the function.",
            "usage": "$min[number;number]\n$max[number;number;...etc]",
            "property": "`number` - The number(s) to evaluate."
        },
        "minute": {
            "name": "$minute",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/minute",
            "description": "Returns the current minute of the hour.",
            "usage": "$minute"
        },
        "modifychannel": {
            "name": "$modifyChannel",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifychannel",
            "description": "Modifies a channel with 7 editable properties. Acts much like a compact function.",
            "usage": "$modifyChannel[channelD;property;input]",
            "property": "`channelID` - Define a channel to modify with it's ID. If left blank, it will modify the current channel.\n`property` - The channel property to modify.\n`input` - The property value of the new modification.\n \n__**Options:**__\nname\ntopic\nposition\nnsfw\nparentid\nlockperms\nslowmode"
        },
        "modifychannelperms": {
            "name": "$modifyChannelPerms",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifychannelperms",
            "description": "Modifies a channels permissions. You can add, and deny them based off of the given channel ID. `+` Will add a permission and `-` will remove a permission.",
            "usage": "$modifyChannelPerms[channelID;+perm,-perm]\n$modifyChannelPerms[channelID;+perm,-perm;userID]\n$modifyChannelPerms[channelID;+perm,-perm;roleID]",
            "property": "`channelID` - The ID of the channel to modify.\n`+perm` -  The permission to add. Separate with commas.\n`-perm` - The permission to remove. Separate with commas.\n`userID` -  The ID of the user to modify permissions of for the defined channel. (Optional).\n`roleID` - The ID of the role to modify permissions of for the defined channel. (Optional)\n \n__**Permissions(10):**__\naddreactions\nsendmessages\nviewchannel\nembedlinks\nuseexternalemoji\nattachfiles\nsendttsmessage\nreadhistory\nmanagechannel\nmanagemessages"
        },
        "modifyemoji": {
            "name": "$modifyEmoji",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifyemoji",
            "description": "Modifies an existing emoji in the current or defined guild.",
            "usage": "$modifyEmoji[guildID;emoji;name]\n$modifyEmoji[guildID;emoji;name;roleID;roleID;etc....]",
            "property": "`guildID` - Defines specific guild for the bot to modify emoji.\n`emoji` - Define an emoji with its ID to modify it.\n`name` - The new name of the emoji.\n`roleID` - Optionally define roles by their ID's. Only these role(s) will have access to use the modified emoji. Separate with commas."
        },
        "modifyrole": {
            "name": "$modifyRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifyrole",
            "description": "Modify a role's name, color, hoisting status and mentionability in the the defined guild or the guild the command is executed in.",
            "usage": "$modifyRole[guildID;roleID;name]\n$modifyRole[guildID;roleID;name;color]\n$modifyRole[guildID;roleID;name;color;hoisted]\n$modifyRole[guildID;roleID;name;color;hoisted;mentionable]",
            "property": "`guildID` - The ID of the guild where the role is to modify.\n`roleID` - The ID of the role to modify.\n`name` - The new name of the role. Leave the field blank to leave name untouched.\n`color` - Define a HEX color to change the color of the role. Leave the field blank to leave color untouched.\n`hoist` - Define `yes` to hoist the role. Define `no` to de-hoist the role. Leave blank to leave untouched.\n`mentionable` - Define `yes` to make the role mentionable. Defined `no` to remove mentionability. Leave blank to leave untouched."
        },
        "modifyroleperms": {
            "name": "$modifyRolePerms",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifyroleperms",
            "description": "Modifies a role's permissions. You can add, and deny them based off of the given role ID. `+` Will add a permission and `-` will remove a permission.",
            "usage": "$modifyRolePerms[roleID;-perm]\n$modifyRolePerms[roleID;+perm]\n$modifyRolePerms[roleID;-perm;+perm;...etc]",
            "property": "`roleID` - The ID of the role to modify.\n`-perm` - Removes a permission from the role.\n`+perm` - Adds a permission to the role.\n \n__**Permissions(31):**__\n- admin\n- manageserver\n- kick\n- addreactions\n- ban\n- manageroles\n- managechannels\n- managewebhooks\n- managemessages\n- viewauditlog\n- managenicknames\n- sendmessages\n- readmessages\n- movemembers\n- manageemojis\n- viewguildinsights\n- mentioneveryone\n- embedlinks\n- viewchannel\n- createinvite\n- mutemembers\n- speak\n- deafenmembers\n- attachfiles\n- connect\n- stream\n- usevad\n- externalemojis\n- sendtts\n- changenickname\n- priorityspeaker"
        },
        "modifywebhook": {
            "name": "$modifyWebhook",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/modifywebhook",
            "description": "Modifies an existing webhook in the current guild with webhook URL.",
            "usage": "$modifyWebhook[URL;name]\n$modifyWebhook[URL;name;avatar]",
            "property": "`URL` - Define a webhook to modify with it's valid URL.\n`name` - The new name of the webhook.\n`avatar` - An image URL to change the webhook avatar to."
        },
        "monthinyear": {
            "name": "$monthInYear",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/monthinyear",
            "description": "Returns the current month of the year as a number. January returns `1`, February returns `2` and so on...",
            "usage": "$monthInYear"
        },
        "monthname": {
            "name": "$monthName",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/monthname",
            "description": "Returns the name of the current month we are in.",
            "usage": "$monthName"
        },
        "msg": {
            "name": "$msg",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/msg",
            "description": "A `Compact Function` pertaining to messages in a channel the bot can see with `21` options to choose from.",
            "usage": "$msg[channelID;messageID;option]",
            "property": "`channelID` - Define the channel with the ID.\n`messageID` - Define the message with the ID.\n`property` - Define the property by its name.\n \n__**Options:**__\n- author\n- authormention\n- authortag\n- authorname\n- channel\n- channelname\n- cleancontent\n- content\n- created\n- guildidid\n- id\n- isdeletable\n- isdeleted\n- iseditable\n- isedited\n- ispinnable\n- ispinned\n- old\n- rawcontent\n- guildname\n- url"
        },
        "multi": {
            "name": "$multi",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/multi",
            "description": "Multiplies the numbers in each of the fields. Any field left blank resembles `0`.",
            "usage": "$multi[value1;value2]\n$multi[value1;value2;value3;etc...]",
            "property": "`value1` - The first number to multiply into.\n`value2` - The second number to multiply.\n`etc` - More numbers to multiply. (Optional)"
        },
        "nickname": {
            "name": "$nickname",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/nickname",
            "description": "Returns the nickname of the command author or the nickname of the supplied user ID. If no nickname is found, function will return the username instead.",
            "usage": "$nickname\n$nickname[]\n$nickname[userID]\n$nickname[userID;guildID]",
            "property": "Leave brackets empty to return the command authors nickname. Same as no brackets.\n`userID` -  Returns the nickname of the supplied user ID.\n`guildID` -  Searches specific guilds for the user and returns their nickname (if any)."
        },
        "nomentionmessage": {
            "name": "$noMentionMessage",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/nomentionmessage",
            "description": "Similar to {hyper:$message:https://docs.db-script.xyz/functions/data/message} but returns the message content without any mentions in it.",
            "usage": "$noMentionMessage\n$noMentionMessage[]\n$noMentionMessage[number]",
            "property": "Leave brackets empty to return all arguments in the command line without mentions. Same as no brackets.\n`number` - Returns the argument in place of the number."
        },
        "numberhasdecimal": {
            "name": "$numberHasDecimal",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/numberhasdecimal",
            "description": "Returns `true` if the number has a decimal in it. Otherwise, function will return `false`.",
            "usage": "$numberHasDecimal[input]",
            "property": "`input` - The content the function will look thru to determine if it is a number with a decimal."
        },
        "numberseparator": {
            "name": "$numberSeparator",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/numberseparator",
            "description": "Separates the number with a symbol at every thousandth digit in the number. If 2nd field is not defined or left blank, separates with a comma.",
            "usage": "$numberSeparator[number]\n$numberSeparator[number;separator]",
            "property": "`number` - The number.\n`separator` - If defined, separate the number at every thousandth digit. If not defined, separates with a comma."
        },
        "numbersfrom": {
            "name": "$numbersFrom",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/numbersfrom",
            "description": "Returns the numbers from starting point to ending point with an optional custom separator.",
            "usage": "$numbersFrom[start;end]\n$numbersFrom[start;end;separator]",
            "property": "`start` - The starting point. Must be a number.\n`end` - The ending point. Must be a number.\n`separator` - Separates each number with the defined separator. Undefined separator will automatically separate with a comma."
        },
        "onlyadmin": {
            "name": "$onlyAdmin",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyadmin",
            "description": "Returns an error message if the command author does not carry the administrator permission.",
            "usage": "$onlyAdmin\n$onlyAdmin[]\n$onlyAdmin[error]",
            "property": "Leave brackets empty for a silent error. Same as no brackets.\n`error` - Define an error message to send to the channel of command execution."
        },
        "onlybotperms": {
            "name": "$onlyBotPerms",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlybotperms",
            "description": "Only allows the bot to respond to the command if the bot has all the permissions provided in the check. Otherwise, the function returns the error message.",
            "usage": "$onlyBotPerms[perm;error]\n$onlyBotPerms[perm;perm;etc..;error]",
            "property": "`perm` - The permission to check. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the bot does not have the defined perms. Must be in the last field. Leave blank for a silent error.\n`{perms}` - The required permissions in the check will be replaced by this placeholder, each separated by a comma.\n \n__**Available permissions:**__\nadmin\nkick\nban\nmanageserver\nmanagemessages\nmanagenicknames\nviewauditlogs\nviewinsights\nmanageroles\nmanagechannels\nmanageemojis\nmanagewebhooks\ncreateinvite\nsendmessages\nsendtts\nreadhistory\nviewchannels\nattachfiles\nembedlinks\nchangenickname\naddreactions\nexternalemojis\nmentioneveryone\n \n__**Voice permissions:**__\npriorityspeaker\nvideo\nconnect\nspeak\nmutemembers\ndeafenmembers\nmovemembers"
        },
        "onlyforcategories": {
            "name": "$onlyForCategories",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforcategories",
            "description": "Command will only execute if the command is triggered in a channel of the category ID. Otherwise, the function returns the error message.",
            "usage": "$onlyForCategories[categoryID;error]\n$onlyForCategories[categoryID;categoryID;etc..;error]",
            "property": "`categoryID` - The ID of a category. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command was not triggered in a channel of the defined category."
        },
        "onlyforchannels": {
            "name": "$onlyForChannels",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforchannels",
            "description": "Command will only execute if the command is triggered in a channel defined in the function. Otherwise, the function returns the error message.",
            "usage": "$onlyForChannels[channelID;error]\n$onlyForChannels[channelID;channelID;etc..;error]",
            "property": "`channelID` - The ID of a channel. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command was not triggered in a defined channel."
        },
        "onlyforguilds": {
            "name": "$onlyForGuilds",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforguilds",
            "description": "Command will only execute if the command is executed in a guild defined in the function. Otherwise, the function returns the error message.",
            "usage": "$onlyForGuilds[guildID;error]\n$onlyForGuilds[guildID;guildID;etc..;error]",
            "property": "`guildID` - The ID of a guild. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command was not triggered in a defined guild."
        },
        "onlyfornicknames": {
            "name": "$onlyForNicknames",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyfornicknames",
            "description": "Command will only execute if the command author has a nickname defined in the function. Otherwise, the function returns the error message.",
            "usage": "$onlyForNicknames[nick;error]\n$onlyForNicknames[nick;nick;etc..;error]",
            "property": "`nick` - The Nickname(s) to match to the command author. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command author does not have one of the defined nicknames."
        },
        "onlyforroles": {
            "name": "$onlyForRoles",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforroles",
            "description": "Command will only execute if the command author has at least one of the defined roles. Otherwise, the function returns the error message.",
            "usage": "$onlyForRoles[roleID;error]\n$onlyForRoles[roleID;roleID;etc..;error]",
            "property": "`roleID` - The ID of a role. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command author does not have at least one of the defined roles."
        },
        "onlyforusernames": {
            "name": "$onlyForUsernames",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforusernames",
            "description": "Command will only execute if the command author does not have one of the usernames defined in the function. Otherwise, the function returns the error message.",
            "usage": "$onlyForUsernames[name;error]\n$onlyForUsernames[name;name;etc..;error]",
            "property": "`name` - The username. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command author does not have one of the usernames defined in the function."
        },
        "onlyforusers": {
            "name": "$onlyForUsers",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyforusers",
            "description": "Command will only execute if the command author is not one of the users defined in the function. Otherwise, the function returns the error message.",
            "usage": "$onlyForUsers[userID;error]\n$onlyForUsers[userID;userID;etc..;error]",
            "property": "`userID` - The ID of a user. Can supply more than one separated by semicolons.\n`error` - The error message to send to the channel if the command author is not one of the users defined in the function."
        },
        "onlyif": {
            "name": "$onlyIf",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyif",
            "description": "If the condition between `value1` and `value2` are `false`, the command will not be executed and the function will send the error message. Otherwise, the command will execute.",
            "usage": "$onlyIf[value1{OPERATOR}value2;error]",
            "property": "`value1` - The first value to compare to the second value.\n`value2` - The second value to compare to the first value.\n`{operator}` - The symbol to compare the 2 values. Must not have spaces between the values and/or operator!\n`error` - The error to send to the channel if the condition does not meet. **{hyper:execute:https://docs.db-script.xyz/guides/executables}** function can be used in the error message to execute an entire command on error.\n \n__**Operators(6):**__:\n`==` - value 1 is equal to value 2.\n`!=` - value 1 is not equal to value 2.\n`>` - value 1 is greater than value 2.\n`>=` - value 1 is greater than or equal to value 2.\n`<` - value 1 is less than value 2.\n`<=` - value 1 is less than or equal to value 2."
        },
        "onlyifmessagecontains": {
            "name": "$onlyIfMessageContains",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyifmessagecontains",
            "description": "Command will only execute if the command message contains one of the defined words. Otherwise, the function return s the error message.",
            "usage": "$onlyIfMessageContains[word;error]\n$onlyIfMessageContains[word;word;etc..;error]",
            "property": "`word` - The word to check for. Can be more than one separated by semicolons.\n`error` - The error to send to the channel. **{hyper:execute:https://docs.db-script.xyz/guides/executables}** function can be used in the error message to execute another command on error."
        },
        "onlyifstartswith": {
            "name": "$onlyIfStartsWith",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyifstartswith",
            "description": "Command will only execute if the command message starts with the content in the 2nd field. Otherwise, the function returns the error message.",
            "usage": "$onlyIfStartsWith[message;startsWith;error]",
            "property": "`message` - The message/arguments the function will check thru.\n`startsWith` - The content the function will check for to start with.\n`error` - The error message when the 1st field does not contain the content in the 2nd field. **{hyper:execute:https://docs.db-script.xyz/guides/executables}** function can be used in the error message to execute another command on error."
        },
        "onlynsfw": {
            "name": "$onlyNSFW",
            "alias": [
                "$onlynsfw"
            ],
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlynsfw",
            "description": "Command will only execute if the command is triggered in a non-NSFW channel. Otherwise, the function returns the error message.",
            "usage": "$onlyNSFW\n$onlyNSFW[]\n$onlyNSFW[error]",
            "property": "Leave brackets empty for a silent error. Same as no brackets.\n`error` - The error to send to the channel if the channel where the command was triggered is not an NSFW channel."
        },
        "onlyperms": {
            "name": "$onlyPerms",
            "alias": [
                "$onlyperms"
            ],
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/onlyperms",
            "description": "Command can only be executed if the command author has at least one of the defined permissions. Otherwise, the function returns the error message.",
            "usage": "$onlyPerms[perm;error]\n$onlyPerms[perm;perm;etc..;error]",
            "property": "`perm` - The permission(s) to check for. Can supply more than one separated by semicolons.\n`error` - The error message when the command author does not have the defined permissions.\n`{perms}` - The required permissions in the check will be replaced by this placeholder, each separated by a comma.\n \n__**Available permissions:**__\nadmin\nkick\nban\nmanageserver\nmanagemessages\nmanagenicknames\nviewauditlogs\nviewinsights\nmanageroles\nmanagechannels\nmanageemojis\nmanagewebhooks\ncreateinvite\nsendmessages\nsendtts\nreadhistory\nviewchannels\nattachfiles\nembedlinks\nchangenickname\naddreactions\nexternalemojis\nmentioneveryone\n \n__**Voice permissions:**__\npriorityspeaker\nvideo\nconnect\nspeak\nmutemembers\ndeafenmembers\nmovemembers"
        },
        "or": {
            "name": "$or",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/or",
            "description": "Returns `true` if one of the conditions are true. Otherwise, returns `false`.",
            "usage": "$or[condition1;condition2]",
            "property": "`condition1` - The first condition in the check.\n`condition2` - The second condition in the check.\n \n**Operators**:\n`>` (greater than)\n`<` (less than)\n`>=` (greater than or equal to)\n`<=` (less than or equal to)\n`==` (equal to)\n`!=` (not equal to)"
        },
        "ordinal": {
            "name": "$ordinal",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/ordinal",
            "description": "Adds `st` or `nd` or `rd` or `th` respectively to the end of a number. If it's not a number, bot will return `undefined`.",
            "usage": "$ordinal[number]",
            "property": "`number` - The number to add an ordinal suffix to."
        },
        "ownerid": {
            "name": "$ownerID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/ownerid",
            "description": "Returns the ID of the guild owner. Define the ID of a guild to return the guild owners ID.",
            "usage": "$ownerID\n$ownerID[]\n$ownerID[guildID]",
            "property": "Leave brackets empty to return the ID of the server owner where the command was executed. Same as no brackets.\n`guildID` - Returns the owner ID of that specific guild."
        },
        "packageversion": {
            "name": "$packageVersion",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/packageversion",
            "description": "Returns the current discordbot-script version your bot environment is on.",
            "usage": "$packageVersion"
        },
        "parentchannelid": {
            "name": "$parentChannelID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/parentchannelid",
            "description": "Returns the category ID of where the channel is located. If left blank, the function will return the category ID of where the the current channel.",
            "usage": "$parentChannelID\n$parentChannelID[]\n$parentChannelID[channelID]",
            "property": "Leave brackets empty to return the category ID of the current channel. Same as no brackets.\n`channelID` -  Supply a channel ID for the function to return its category ID location."
        },
        "parsefromms": {
            "name": "$parseFromMS",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/parsefromms",
            "description": "Parses provided time from MS (milliseconds) to a human readable time.",
            "usage": "$parseFromMS[input]",
            "property": "`input` - The MS to parse into a human readable time."
        },
        "parsetoms": {
            "name": "$parseToMS",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/parsetoms",
            "description": "Parses human readable time into MS (milliseconds).",
            "usage": "$parseToMS[input]",
            "property": "`input` - The human readable time to parse into MS."
        },
        "pause": {
            "name": "$pause",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/pause",
            "description": "Pauses the currently playing audio. If the bot is not playing any audio, the function returns a default error message. Can be caught with {hyper:$queueLength:https://docs.db-script.xyz/functions/music/queuelength}",
            "usage": "$pause"
        },
        "ping": {
            "name": "$ping",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/ping",
            "description": "Returns your bots latency to the Discord API so, you can check the speed of command executions.",
            "usage": "$ping"
        },
        "platform": {
            "name": "$platform",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/platform",
            "description": "Returns the platform where the command author or a specific user is using Discord.",
            "usage": "$platform\n$platform[]\n$platform[userID]",
            "property": "Leave brackets empty to return the platform the command author is using. Same as no brackets.\n`userID` - Returns the platform of the specific user ID.\n \n__**Outputs:**__\ndesktop\nmobile\nweb\noffline"
        },
        "play": {
            "name": "$play",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/play",
            "description": "Plays a song via YouTube link. If 2nd field is not defined, bot will automatically disconnect from the voice channel when all audio is finished playing and the queue is empty.",
            "usage": "$play[link]\n$play[link;yes]\n$play[link;no]",
            "property": "`link` - Supply a valid YouTube link for the bot to play as audio.\n`yes` - Means the bot will disconnect from the voice channel when bot is finished playing music.\n`no` - Means the bot will remain in the voice channel when bot is finished playing music."
        },
        "positionincategory": {
            "name": "$positionInCategory",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/positionincategory",
            "description": "Returns the position of a channel inside of a category. Also works for text channels outside of a category.",
            "usage": "$positionInCategory\n$positionInCategory[]\n$positionInCategory[userID]",
            "property": "Leave brackets empty to return the position of the current channel in the current category the channel is in.\n`userID` - Returns the position of the defined channel in its category."
        },
        "power": {
            "name": "$power",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/power",
            "description": "Returns the sum of the value of the 1st field to the power of the value of the 2nd field.",
            "usage": "$power[num1;num2]",
            "property": "`num1` - The main number to be powered.\n`num2` - The power number."
        },
        "queue": {
            "name": "$queue",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/queue",
            "description": "Returns the songs in the queue with details.",
            "usage": "$queue[]\n$queue[placeholders;start;end]",
            "property": "`placeholders` - The placeholders for getting queue information. Defaults at `{position} - {name}`.\n`start` - The starting point of songs in the queue to display. Starts and defaults at `0`.\n`end` - The ending point of songs in the queue to display. Defaults at `10`.\n \n__**Placeholders:**__\n`{request-id}` - The ID of the user that requested the song.\n`{request-tag}` - The tag of the user that requested the song.\n`{request-name}` - The username of the user that requested the song.\n`{url}` - The URL of the song.\n`{name}` - The name of the song.\n`{position}` - The position of the song."
        },
        "queuelength": {
            "name": "$queueLength",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/queuelength",
            "description": "Returns the number of songs in the queue. If no songs are in the queue, the function returns `0`.",
            "usage": "$queueLength"
        },
        "ram": {
            "name": "$ram",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/ram",
            "description": "A `Compact Function` pertaining to your host's RAM data with `11` options to choose from.\n**Must `npm install systeminformation` before attempting to use this function**",
            "usage": "$ram[option]",
            "property": "`option` - The .\n \n__**Options:**__\n- active\n- clockspeed\n- free\n- freeswap\n- manufacturer\n- total\n- totalswap\n- used\n- usedswap\n- voltmax\n- voltmin"
        },
        "random": {
            "name": "$random",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/random",
            "description": "Returns a random number between the 1st and 2nd fields.",
            "usage": "$random[min;max]",
            "property": "`min` - The minimum number. Function will not go under this number.\n`max` - The maximum number. Function will not go over this number."
        },
        "randomchannelid": {
            "name": "$randomChannelID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomchannelid",
            "description": "Returns a random channel ID from the guild where the command is executed or from a defined guild.",
            "usage": "$randomChannelID\n$randomChannelID[]\n$randomChannelID[guildID]",
            "property": "Leave brackets empty to return a random channel ID from the guild where the command is executed. Same as no brackets.\n`guildID` - Define a guild to return a random channel from the defined guild."
        },
        "randomguildid": {
            "name": "$randomGuildID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomguildid",
            "description": "Returns a random guild ID from any guild your bot is in.",
            "usage": "$randomGuildID"
        },
        "randomroleid": {
            "name": "$randomRoleID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomroleid",
            "description": "Returns a random role ID from the guild where the command is executed or from a defined guild.",
            "usage": "$randomRoleID\n$randomRoleID[]\n$randomRoleID[guildID]",
            "property": "Leave brackets empty to return a random role ID from the guild where the command is executed. Same as no brackets.\n`guildID` - Define a guild to return a random role ID from the defined guild."
        },
        "randomstring": {
            "name": "$randomString",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomstring",
            "description": "Returns a random string of letters, and numbers.",
            "usage": "$randomString\n$randomString[]\n$randomString[amount]\n$randomString[amount;characters]",
            "property": "Leave brackets empty to return 10 random characters. Same as no brackets.\n`amount` - The amount of characters to return. Defaults to 10.\n`characters` - The characters to randomize. Defaults to a default set of system characters."
        },
        "randomtext": {
            "name": "$randomText",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomtext",
            "description": "Returns a random text between the defined words. Separate the words with semicolons.",
            "usage": "$randomText[text;text]\n$randomText[text;text;etc...]",
            "property": "`text` - The text to randomize, separated by semicolons. The more words in the function, the more random the function will get."
        },
        "randomuserid": {
            "name": "$randomUserID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomuserid",
            "description": "Returns a random user ID of someone in the current or defined guild.",
            "usage": "$randomUserID\n$randomUserID[]\n$randomUserID[guildID]",
            "property": "Leave brackets empty to return a random user ID from the current guild. Same as no brackets.\n`guildID` - Define a guild ID to return a random user ID from that guild."
        },
        "randomuserreaction": {
            "name": "$randomUserReaction",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/randomuserreaction",
            "description": "Returns the ID of a random user from a message of a specific reaction.",
            "usage": "$randomUserReaction[channelID;messageID;emoji]",
            "property": "`channelID` - The ID of a channel where the reaction takes place.\n`messageID` - The messageID associated with the emoji reaction.\n`emoji` - The emoji used to react to a message."
        },
        "reactioncount": {
            "name": "$reactionCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/reactioncount",
            "description": "Returns the number of users reacted with a specific emoji on a message. If no reactions of that emoji are found, bot returns `undefined`.",
            "usage": "$reactionCount[channelID;messageID;emoji]",
            "property": "`channelID` - Define a channel where the message is.\n`messageID` - Define a message with message ID.\n`emoji` - Define the emoji to count user reactions. Does not work with physical custom emoji. Must be the ID of a custom emoji or a basic emoji."
        },
        "reboot": {
            "name": "$reboot",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/reboot",
            "description": "Reboots the bot. MUST have the `main` property in your `package.json` match your main bot file name!",
            "usage": "$reboot\n$reboot[]\n$reboot[feedback]",
            "property": "Leave blank to reboot with no feedback. Same as no brackets.\n`feedback` - The message to be sent to the channel before rebooting."
        },
        "region": {
            "name": "$region",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/region",
            "description": "Returns the current or specific guilds region name.",
            "usage": "$region\n$region[]\n$region[guildID]",
            "property": "Leave brackets empty to return the region of the current guild. Same as no brackets.\n`guildID` - Returns the region of the specific guild ID."
        },
        "removeallreactions": {
            "name": "$removeAllReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/removeallreactions",
            "description": "Removes all reactions on the message in the defined channel.",
            "usage": "$removeAllReactions[channelID;messageID]",
            "property": "`channelID` - Define a channel where the message is.\n`messageID` - Define a message with message ID."
        },
        "removereactions": {
            "name": "$removeReactions",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/removereactions",
            "description": "Removes all reactions of a specific emoji(s) on a message in the defined channel.",
            "usage": "$removeReactions[channelID;messageID;emoji]\n$removeReactions[channelID;messageID;emoji;emoji;etc....]",
            "property": "`channelID` - Define a channel where the message is.\n`messageID` - Define a message with message ID.\n`emoji` - Define the emoji(s) to remove all of those reactions. Does not work with physical custom emoji. Must be the ID of a custom emoji or a basic emoji."
        },
        "repeat": {
            "name": "$repeat",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/repeat",
            "description": "Repeats the given content the defined number of times.",
            "usage": "$repeat[number;content]",
            "property": "`number` -  Number of times the bot will repeat the content.\n`content` - The content to repeat."
        },
        "replacetext": {
            "name": "$replaceText",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/replacetext",
            "description": "If the content in the 1st field matches the content in the 2nd field, the function will return the content in the 3rd field. Otherwise, the function will return the content in the 1st field.",
            "usage": "$replaceText[content;matches;new]",
            "property": "`content` - The content that the function will look at when matching with the 2nd field.\n`matches` - The content that matches the 1st field.\n`new` - The new content that will be replaced with the content in the first field. Now accepts {hyper:execute:https://docs.db-script.xyz/guides/executables} in this field!"
        },
        "replyin": {
            "name": "$replyIn",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/replyin",
            "description": "Executes the command after the defined time (in milliseconds).",
            "usage": "$replyIn[time]",
            "property": "`time` - The time in milliseconds the bot will wait to execute the command."
        },
        "resetchannelvar": {
            "name": "$resetChannelVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/resetchannelvar",
            "description": "Resets all the channel variables data associated with the variable name back to default value.",
            "usage": "$resetChannelVar[varName]",
            "property": "`varName` - The channel variable being reset of all its data."
        },
        "resetmessagevar": {
            "name": "$resetMessageVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/resetmessagevar",
            "description": "Resets all the message variables data associated with the variable name back to default value. If a message ID is defined in the 2nd field, function will reset the variable for that message.",
            "usage": "$resetMessageVar[varName]",
            "property": "`varName` - The message variable being reset of all its data."
        },
        "resetservervar": {
            "name": "$resetServerVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/resetservervar",
            "description": "Resets all the server variables data associated with the variable name back to default value.",
            "usage": "$resetServerVar[varName]",
            "property": "`varName` - The server variable being reset of all its data."
        },
        "resetuservar": {
            "name": "$resetUserVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/resetuservar",
            "description": "Resets all the user variables data associated with the variable name back to default value.",
            "usage": "$resetUserVar[varName]",
            "property": "`varName` - The user variable being reset of all its data."
        },
        "resetvar": {
            "name": "$resetVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/resetvar",
            "description": "Resets the global variables data associated with the variable name back to default value.",
            "usage": "$resetVar[varName]",
            "property": "`varName` - The global variable being reset of all its data."
        },
        "resume": {
            "name": "$resume",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/resume",
            "description": "Resumes the currently paused song or audio. If bot is not playing any audio, the function returns the system error message. Catch with $isPaused.",
            "usage": "$resume"
        },
        "returnemoji": {
            "name": "$returnEmoji",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/returnemoji",
            "description": "Returns the actual emoji from an emoji name or ID.",
            "usage": "$returnEmoji[name/ID]\n$returnEmoji[name/ID;guildID]",
            "property": "`name/ID` - **(CHOOSE ONE)** The name or ID of the emoji to return.\n`guildID` - The ID of the guild to return the emoji from."
        },
        "revokinvite": {
            "name": "$revokInvite",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/revokinvite",
            "description": "Revokes/Deletes a guild invite from any guild the bot can see. Bot must have permissions to manage guild!",
            "usage": "$revokeInvite[link]\n$revokeInvite[full link]\n$revokeInvite[code]",
            "property": "`link` - The link to the guild invite.\n`full link` - The full link to the guild invite.\n`code` - The code to the invite link."
        },
        "role": {
            "name": "$role",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/role",
            "description": "A `Compact Function` pertaining to a guild role with `15` options to choose from.",
            "usage": "$role[roleID;option]",
            "property": "`roleID` - Define the role you're calling upon with an ID.\n`property` - Define the property by its name.\n \n__**Options:**__\n- created\n- hex\n- id\n- isdeleted\n- iseditable\n- ishoisted\n- ismanaged\n- ismentionable\n- mention\n- name\n- postition\n- rawposition\n- guild\n- guildname\n- timestamp"
        },
        "rolecount": {
            "name": "$roleCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/rolecount",
            "description": "Returns the total number of roles that are in a guild/server.",
            "usage": "$roleCount\n$roleCount[]\n$roleCount[guildID]",
            "property": "Leave brackets empty to returns the total number of roles in the current server. Same as no brackets.\n`guildID` - Returns the total number of roles in the defined guild."
        },
        "roleexists": {
            "name": "$roleExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/roleexists",
            "description": "Returns `true` if the role exists in the guild. Otherwise, function returns `false`.",
            "usage": "$roleExists[roleID]\n$roleExists[roleID,guildID]",
            "property": "`roleID` - The ID of a role to check if it exists or can be seen by the bot.\n`guildID` - The ID of the guild where the role may or may not be located."
        },
        "roleid": {
            "name": "$roleID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/roleid",
            "description": "Returns the ID of the given role name if found in the guild. If 2nd field is not used, the function will look for the role in the current guild.",
            "usage": "$roleID[roleName]\n$roleID[roleName;guildID]",
            "property": "`roleName` - The name of the role.\n`guildID` - The ID of the guild where the role is located."
        },
        "rolename": {
            "name": "$roleName",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/rolename",
            "description": "Returns the ID of the given role name if found in the guild. If 2nd field is not used, the function will look for the role in the current guild.",
            "usage": "$roleID[roleName]\n$roleID[roleName;guildID]",
            "property": "`roleName` - The name of the role.\n`guildID` - The ID of the guild where the role is located."
        },
        "roleposition": {
            "name": "$rolePosition",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/roleposition",
            "description": "Returns the position of the supplied role ID in the guild. If 2nd field is not used, the function will look for the role in the current guild.",
            "usage": "$rolePosition[roleID]\n$rolePosition[roleID;guildID]",
            "property": "`roleID` - The ID of the role.\n`guildID` - The ID of the guild where the role is located."
        },
        "round": {
            "name": "$round",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/round",
            "description": "Rounds the number up or down to the nearest whole number.",
            "usage": "$round[number]",
            "property": "`number` - The number the function will be rounding."
        },
        "rounddown": {
            "name": "$roundDown",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/rounddown",
            "description": "Rounds the number down to the nearest whole number.",
            "usage": "$roundDown[number]",
            "property": "`number` - The number the function will be rounding down."
        },
        "roundup": {
            "name": "$roundUp",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/roundup",
            "description": "Rounds the number up to the nearest whole number.",
            "usage": "$roundUp[number]",
            "property": "`number` - The number the function will be rounding up."
        },
        "second": {
            "name": "$second",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/second",
            "description": "Returns the current second of the minute. Usually goes hand in hand with {hyper:$hour:https://docs.db-script.xyz/functions/data/hour} and {hyper:$minute:https://docs.db-script.xyz/functions/data/minute}.",
            "usage": "$second"
        },
        "semester": {
            "name": "$semester",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/semester",
            "description": "Breaks down the year into `3 month` quarters, much like schools do.",
            "usage": "$semester",
            "property": "__Commands being ran in these months will return `1`:__\nJanuary\nFebruary\nMarch\n \n__Commands being ran in these months will return `2`:__\nApril\nMay\nJune\n \n__Commands being ran in these months will return `3`:__\nJuly\nAugust\nSeptember\n \n__Commands being ran in these months will return `4`:__\nOctober\nNovember\nDecember\n \n"
        },
        "sendcrosspost": {
            "name": "$sendCrosspost",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/sendcrosspost",
            "description": "Sends a message to all the channels in the function. Bot must be in the server to send the message.",
            "usage": "$sendCrosspost[message;channelID;channelID;...etc]",
            "property": "`message` - The message being sent to the channel(s).\n`channelID` - The ID of the channel to send the message to. May contain more than one separated by semicolons."
        },
        "sendcrosspostdm": {
            "name": "$sendCrosspostDM",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/sendcrosspostdm",
            "description": "Sends a message to all the user(s) in the function.",
            "usage": "$sendCrosspostDM[message;userID;userID;...etc]",
            "property": "`message` - The message being sent to the channel(s).\n`userID` - The ID of the user to send the message to."
        },
        "sendwebhook": {
            "name": "$sendWebhook",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/sendwebhook",
            "description": "Sends a message using an existing webhook in the server/channel. Provide the webhookURL and the message to send. Great for logs and more!",
            "usage": "$sendWebhook[hookURL;message]",
            "property": "`hookURL` - Define a valid webhookURL.\n`message` - The message to send using the webhook."
        },
        "setbotavatar": {
            "name": "$setBotAvatar",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setbotavatar",
            "description": "Sets the bots avatar in the developers portal and globally. Bot is automatically rate limited to 2x per hour by the Discord API!",
            "usage": "$setBotAvatar[imageURL]",
            "property": "`imageURL` - A valid image URL to set as the new bots avatar."
        },
        "setbotname": {
            "name": "$setBotName",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setbotname",
            "description": "Sets the bots name in the developers portal and globally. Bot is automatically rate limited to 2x per hour by the Discord API!",
            "usage": "$setBotName[name]",
            "property": "`name` - The new name of the bot."
        },
        "setchannelname": {
            "name": "$setChannelName",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setchannelname",
            "description": "Sets the new channel name. Bot is automatically rate limited to 10 minutes per name change by the Discord API!",
            "usage": "$setChannelName[channelID;name]",
            "property": "`channelID` - The channel ID of the channel you're attempting to change the name of.\n`name` - The new name of the channel."
        },
        "setchannelposition": {
            "name": "$setChannelPosition",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setchannelposition",
            "description": "Sets a channels position within the category it is currently in. If a category ID is defined, the category will be repositioned within the guild.",
            "usage": "$setChannelPosition[channelID;number]",
            "property": "`channelID` - The ID of the channel or category to reposition.\n`number` - The position number. 1 is defined to be at the top."
        },
        "setchanneltopic": {
            "name": "$setChannelTopic",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setchanneltopic",
            "description": "Sets the new channel topic. Bot is automatically rate limited to 10 minutes per name change by the Discord API!",
            "usage": "$setChannelTopic[channelID]\n$setChannelTopic[channelID;topic]",
            "property": "`channelID` - The channel ID of the channel you're attempting to update the topic of.\n`topic` - The new topic of the channel. If 2nd field not defined or left empty, function will leave the channel topic untouched."
        },
        "setchannelvar": {
            "name": "$setChannelVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/setchannelvar",
            "description": "Set the value of the defined channel variable to a new value. You can provide a channel ID in the 2nd field to set the variable value of the specific channel.",
            "usage": "$setChannelVar[varName;newValue]\n$setChannelVar[varName;newValue;channelID]",
            "property": "`varName` - The variable being called in the command.\n`newValue` - The new value for the channel variable.\n`channelID` - The ID of the channel attached to the variable (You can omit this field of leave empty to set the current channel variable value)."
        },
        "setemojiname": {
            "name": "$setEmojiName",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setemojiname",
            "description": "Sets a new name of an emoji in the defined guild.",
            "usage": "$setEmojiName[guildID;emojiID;name]",
            "property": "`emojiID` - Supply the emoji ID you're changing the name of.\n`guildID` - The ID of the guild that holds the emoji you're changing the name of.\n`name` - The new name for the emoji."
        },
        "setguildicon": {
            "name": "$setGuildIcon",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setguildicon",
            "description": "Sets a new guild icon. Bot is automatically rate limited to 2x per hour by the Discord API!",
            "usage": "$setGuildIcon[URL]\n$setGuildIcon[URL;guildID]",
            "property": "`URL` - A valid image URL to set as the new guild icon.\n`guildID` - The ID of the guild to set the icon for."
        },
        "setguildname": {
            "name": "$setGuildName",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setguildname",
            "description": "Sets a new guild name. Bot is automatically rate limited to 2x per hour by the Discord API!",
            "usage": "$setGuildName[name]\n$setGuildName[name;guildID]",
            "property": "`name` - The new name of the guild.\n`guildID` - The ID of the guild to change the name for."
        },
        "setmessagevar": {
            "name": "$setMessageVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/setmessagevar",
            "description": "Set the value of the defined message variable to a new value. You can provide a message ID in the 2nd field to set the variable value of the specific message.",
            "usage": "$setMessageVar[varName;newValue]\n$setMessageVar[varName;newValue;messageID]",
            "property": "`varName` - The variable being called in the command.\n`newValue` - The new value for the message variable.\n`messageID` - The ID of the message attached to the variable."
        },
        "setnickname": {
            "name": "$setNickname",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setnickname",
            "description": "Sets a nickname for the defined user in a guild.",
            "usage": "$setNickname[guildID;userID;nick]",
            "property": "`guildID` - The ID of the guild where the user is located.\n`userID` - The ID of the user to change the nickname of.\n`nick` - The new nickname to change the user to in the defined guild."
        },
        "setroleposition": {
            "name": "$setRolePosition",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setroleposition",
            "description": "Sets a new position for a role in the guild. Roles are mapped from the bottom of the role list. The @everyone role is defined as `0`.",
            "usage": "$setRolePosition[guildID;roleID]\n$setRolePosition[guildID;roleID;position]",
            "property": "`roleID` - The ID of the role.\n`guildID` - The ID of the guild where the role is located. Empty field defines current guild.\n`position` - The new role position."
        },
        "setservervar": {
            "name": "$setServerVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/setservervar",
            "description": "Set the value of the provided server variable to a new value. You can provide a guild ID in the 2nd field to set the variable value of the specific guild.",
            "usage": "$setServerVar[varName;newValue]\n$setServerVar[varName;varValue;guildID]",
            "property": "`varName` - The variable being called in the command.\n`newValue` -  New value of the server variable.\n`guildID` - The ID of the guild to set the value for."
        },
        "setslowmode": {
            "name": "$setSlowMode",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setslowmode",
            "description": "Sets the slowmode of the desired channel in seconds. 60 seconds equals 1 minute.",
            "usage": "$setSlowMode[channelID]\n$setSlowMode[channelID;time]",
            "property": "`channelID` - The ID of the channel to set the slowmode of.\n`time` - The time to set the channels slowmode to. If field is not defined or left empty, the function will remove the slowmode."
        },
        "setstatus": {
            "name": "$setStatus",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/setstatus",
            "description": "Sets the presence status of your bot.",
            "usage": "$setStatus[option]",
            "property": "`option` - The presence option to change your bots presence to.\n \n__**Presences:**__\ndnd\nidle\nonline\ninvisible"
        },
        "setuservar": {
            "name": "$setUserVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/setuservar",
            "description": "Set the value of the provided user variable in the guild the command is executed in. This variable is not global and the value can only be set for the user in the server the command is executed in.",
            "usage": "$setUserVar[varName;newValue]\n$setUserVar[varName;newValue;userID]",
            "property": "`varName` - The variable being called in the command.\n`newValue` -  New value of the user variable.\n`userID` - The user ID attached to the variable **(You can omit this field or leave blank to set the command authors variable value)**."
        },
        "setvar": {
            "name": "$setVar",
            "type": "variable",
            "url": "https://docs.db-script.xyz/functions/variables/setvar",
            "description": "Set the value of the global variable. You can provide a user ID in the 3rd field to set the global variable value of the specific user. This variable can be seen in every guild the bot is in!",
            "usage": "$setVar[varName;newValue]\n$setVar[varName;newValue;userID]",
            "property": "`varName` - The variable being called in the command.\n`newValue` -  New value of the global variable.\n`userID` - The user ID attached to the global variable. (You can omit this field or leave blank to get the global variable value)."
        },
        "shutdown": {
            "name": "$shutdown",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/shutdown",
            "description": "Shut down your bot with a command. Accepts brackets for a feedback message before shutting down. Supports embeds!",
            "usage": "$shutdown\n$shutdown[]\n$shutdown[message]",
            "property": "Leaving blank will simply shutdown the bot silently. Same as no brackets.\n`message` - The message response to be sent to the channel before shutting down."
        },
        "skip": {
            "name": "$skip",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/skip",
            "description": "Skips the currently playing song to the next in the queue.",
            "usage": "$skip"
        },
        "sortguildids": {
            "name": "$sortGuildIDs",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/sortguildids",
            "description": "Returns the amount of guilds your bot is in sorted by their IDs. If field is left empty, it will return 10 by default.",
            "usage": "$sortGuildIDs\n$sortGuildIDs[]\n$sortGuildIDs[number]\n$sortGuildIDs[number;separator]",
            "property": "Leave brackets empty to return up to 10 guilds your bot is in. Same as no brackets.\n`number` - Returns that specific number of guild IDs.\n`separator` - What to separate the IDs with. Default is an ID on a new line."
        },
        "sortguildnames": {
            "name": "$sortGuildNames",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/sortguildnames",
            "description": "Returns the amount of guilds your bot is in sorted by their names. If field is left empty, it will return 10 by default.",
            "usage": "$sortGuildNames\n$sortGuildNames[]\n$sortGuildNames[number]\n$sortGuildNames[number;separator]",
            "property": "Leave brackets empty to return up to 10 guilds your bot is in. Same as no brackets.\n`number` - Returns that specific number of guild names.\n`separator` - What to separate the names with. Default is a name on a new line."
        },
        "splitcontent": {
            "name": "$splitContent",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/splitcontent",
            "description": "Splits the content in the `content` field with the content in the `splitter` field. The content in the `actual` field will be splitted at every `arg` field.",
            "usage": "$splitContent[content;arg;actual;splitter]",
            "property": "`content` - The content to be splitted.\n`arg` - The number of times to split. Must be a number.\n`actual` - The actual content to split.\n`splitter` - Replaces to this from the content in the 3rd field."
        },
        "splittext": {
            "name": "$splitText",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/splittext",
            "description": "Returns an index of splitted text from a {hyper:$textSplit:https://docs.db-script.xyz/functions/data/textsplit} function.",
            "usage": "$splitText[index]",
            "property": "`index` - The position of a splitted text. Must be a number."
        },
        "splittextfrom": {
            "name": "$splitTextFrom",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/splittextfrom",
            "description": "Returns {hyper:$textSplit:https://docs.db-script.xyz/functions/data/textsplit} values from starting point to ending point. Like {hyper:$textSplit:https://docs.db-script.xyz/functions/data/splittext} but returns from point A to point B instead of just 1 index",
            "usage": "$splitTextFrom[start;end;separator]",
            "property": "`start` - The starting point. Define as a number starting at 1 being your first $textSplit value.\n`end` - The ending point. Define as a number being the last textSplit value to return in the string.\n`separator` - Each argument will be separated with the content in this field."
        },
        "splittextjoin": {
            "name": "$splitTextJoin",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/splittextjoin",
            "description": "Replaces the separator that is in a {hyper:$textSplit:https://docs.db-script.xyz/functions/data/textsplit} with the content in this function. All code content above this function will see and apply the new separator.",
            "usage": "$splitTextJoin[separator]",
            "property": "`separator` - The separator to replace the old separator with."
        },
        "splittextlength": {
            "name": "$splitTextLength",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/splittextlength",
            "description": "Returns the length of the splitted text by counting the characters.",
            "usage": "$splitTextLength[split]",
            "property": "`split` - The splitted Text to be counted for length."
        },
        "spoiler": {
            "name": "$spoiler",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/spoiler",
            "description": "Returns the message content in a spoiler.",
            "usage": "$spoiler[input]",
            "property": "input - The content input to spoil."
        },
        "squareroot": {
            "name": "$squareRoot",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/squareroot",
            "description": "Returns precise square root of the number to the decimal.",
            "usage": "$squareRoot[number]",
            "property": "`number` - The number the function will be returning the square root of."
        },
        "startswith": {
            "name": "$startsWith",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/startswith",
            "description": "Returns `true` if the content in the 1st field starts with what's in the 2nd field. Otherwise, the function returns `false`.",
            "usage": "$startsWith[content;startsWith]",
            "property": "`content` - The content being checked.\n`startsWith` - The letters that the 1st field is being checked for containment."
        },
        "status": {
            "name": "$status",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/status",
            "description": "Returns the presence status of a user with their ID.",
            "usage": "$status\n$status[]\n$status[userID]",
            "property": "Leave brackets empty to return the presence status of the command author. Same as no brackets.\n`userID` - The ID of the user to return to status of.\n \n__**Outputs:**__\n- online\n- invisible\n- idle\n- dnd"
        },
        "stop": {
            "name": "$stop",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/stop",
            "description": "Stops all music from playing and removes all songs from queue.",
            "usage": "$stop"
        },
        "strikethrough": {
            "name": "$strikethrough",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/strikethrough",
            "description": "Returns the content with a strikethrough.",
            "usage": "$strikethrough[input]",
            "property": "input - The content input to strikethrough."
        },
        "stringfrom": {
            "name": "$stringFrom",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/stringfrom",
            "description": "Returns the character content from the 2nd field to the 3rd field. If the 2nd and 3rd field are not defined, function will not return anything.",
            "usage": "$stringFrom[content;start;end]",
            "property": "`content` - The content to check.\n`start` - The starting point. Define as a number.\n`end` - The ending point. Define as a number."
        },
        "sub": {
            "name": "$sub",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/sub",
            "description": "Subtracts the numbers in each of the fields. Any field left blank resembles `0`.",
            "usage": "$sub[value1;value2]\n$sub[value1;value2;value3;etc...]",
            "property": "`value1` - The first number to subtract from.\n`value2` - The second number to subtract.\n`etc` - More numbers to subtract. (Optional)."
        },
        "sum": {
            "name": "$sum",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/sum",
            "description": "Adds the numbers in each of the fields. Any field left blank resembles `0`.",
            "usage": "$sum[value1;value2]\n$sum[value1;value2;value3;etc...]",
            "property": "`value1` - The first number to add.\n`value2` - The second number to add.\n`etc` - More numbers to add. (Optional)."
        },
        "suppresserrors": {
            "name": "$suppressErrors",
            "type": "limiter",
            "url": "https://docs.db-script.xyz/functions/limiters/suppresserrors",
            "description": "Suppresses all errors including the ones from all other limiters. Embeds and {execute} can be used in the brackets.",
            "usage": "$suppressErrors\n$suppressErrors[]\n$suppressErrors[error]",
            "property": "Leave brackets empty to silently suppress all errors.\n`error` - The error message to send to the channel if the bot encounters an error."
        },
        "systemchannelid": {
            "name": "$systemChannelID",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/systemchannelid",
            "description": "Returns the ID of the system channel that the server has enabled on the overview tab of thier server. Returns `undefined` if no system channel ID is found.",
            "usage": "$systemChannelID\n$systemChannelID[]\n$systemChannelID[guildID]",
            "property": "Leave brackets empty to return the system channel ID of the current server. Same as no brackets.\n`guildID` - Returns the system channel ID of the defined guild ID."
        },
        "tag": {
            "name": "$tag",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/tag",
            "description": "Returns the tag of the command author or the defined ID of a user.",
            "usage": "$tag\n$tag[]\n$tag[userID]",
            "property": "Leave brackets empty to return the command authors tag. Same as no brackets.\n`userID` - Supply a user ID to return their tag. Returns undefined if no user is found."
        },
        "takerole": {
            "name": "$takeRole",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/takerole",
            "description": "Removes the defined role from a member of the defined guild. 4th field sets a reason and will be audited.",
            "usage": "$takeRole[roleID]\n$takeRole[roleID;userID]\n$takeRole[roleID;userID;guildID]\n$takeRole[roleID;userID;guildID;reason]",
            "property": "`roleID` - The ID of the role to remove from the user.\n`userID` - The ID of the user to remove the role from. Defaults to command author.\n`guildID` - The ID of the guild where the user and role is located. Defaults to current guild.\n`reason` - The reason for removing the role. Audits the reason. May be optional."
        },
        "tempactivity": {
            "name": "$tempActivity",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/tempactivity",
            "description": "Temporarily set the bots activity status until the rotation interval changes it.",
            "usage": "$tempActivity[message]",
            "property": "`message` - The new temporary activity status the bot will display until it permanently changes due to the status rotation interval."
        },
        "textafter": {
            "name": "$textAfter",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/textafter",
            "description": "Returns the content after the query field.",
            "usage": "$textAfter[content;query]",
            "property": "`content` - The content being reviewed by the function.\n`query` - The word the function will be looking for in the 1st field. If the function finds it, function will return everything after the query."
        },
        "textbefore": {
            "name": "$textBefore",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/textbefore",
            "description": "Returns the content before the query field.",
            "usage": "$textBefore[content;query]",
            "property": "`content` - The content being reviewed by the function.\n`query` - The function the word will be looking for in the 1st field. If the function finds it, function will return everything before the query."
        },
        "textbetween": {
            "name": "$textBetween",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/textbetween",
            "description": "Returns the content between the `first` and `last` fields.",
            "usage": "$textBetween[content;first;last]",
            "property": "`content` - The content being reviewed by the function.\n`first` - The first word the function will be looking for in the 1st field.\n`last` - The last word the function will be looking for in the 1st field."
        },
        "textsplit": {
            "name": "$textSplit",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/textsplit",
            "description": "Splits the text in the 1st field with a separator in the 2nd field.",
            "usage": "$textSplit[index;separator]",
            "property": "`index` - Text data in the 1st field should be separated by the separator used in the 2nd field.\n`separator` - The separator to separate each index in the 1st field with."
        },
        "thumbnail": {
            "name": "$thumbnail",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/thumbnail",
            "description": "Sets a thumbnail image of the embedded message.",
            "usage": "$thumbnail[url]",
            "property": "`url` - A valid image URL to display in the thumbnail."
        },
        "time": {
            "name": "$time",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/time",
            "description": "Returns the time the bot is reading from the OS/server/host in am/pm format.",
            "usage": "$time"
        },
        "title": {
            "name": "$title",
            "type": "embed",
            "url": "https://docs.db-script.xyz/functions/embeds/title",
            "description": "Sets the title of the embedded message. Optional 2nd field embeds the title as a hyperlink to a valid image or website.",
            "usage": "$title[content]\n$title[content;url]",
            "property": "`content` - The content to go into the embed title.\n`url` - A valid URL to hyperlink the title with."
        },
        "tofixed": {
            "name": "$toFixed",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/tofixed",
            "description": "Rounds a number in a specific spot and adds zeros where applicable.",
            "usage": "$toFixed[number1;number2]",
            "property": "`number1` - The number to be rounded.\n`number2` - The number placement to round."
        },
        "togoofcase": {
            "name": "$toGoofcase",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/togoofcase",
            "description": "Capitalizes the 1st letter of each word.",
            "usage": "$toGoofcase[words]",
            "property": "`words` - The words to have the 1st letter capitalized."
        },
        "tolowercase": {
            "name": "$toLowercase",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/tolowercase",
            "description": "Lowercases all the words in the brackets of the function.",
            "usage": "$toLowercase[words]",
            "property": "words - The words to have lowercased."
        },
        "tolowergoofcase": {
            "name": "$toLowerGoofcase",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/tolowergoofcase",
            "description": "Lowercases the 1st letter of each word.",
            "usage": "$toLowerGoofcase[words]",
            "property": "`words` - The words to have the 1st letter lowercased."
        },
        "touppercase": {
            "name": "$toUppercase",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/touppercase",
            "description": "Capitalizes all the words in the brackets of the function.",
            "usage": "$toUppercase[words]",
            "property": "`words` - The words to be capitalized."
        },
        "trackinfo": {
            "name": "$trackInfo",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/trackinfo",
            "description": "Returns information about a song in the queue.",
            "usage": "$trackInfo[option;number]",
            "property": "`option` - The data to return for the song.\n`number` - The position of the song in the queue.\n \n__**Options:**__\n- author\n- length\n- requester\n- thumbnail\n- title\n- url"
        },
        "truncate": {
            "name": "$truncate",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/truncate",
            "description": "Drops off the numbers after the decimal and just leaves the whole number.",
            "usage": "$truncate[number]",
            "property": "`number` - The number the function will be truncating."
        },
        "tts": {
            "name": "$tts",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/tts",
            "description": "Sends a Text-To-Speech message to the defined channel.",
            "usage": "$tts[channelID;message]\n$tts[channelID;message;no]",
            "property": "`channelID` - The channelID to send the message.\n`message` - The message to be spoken.\n`no` - If you want the message to be sent without Text-To-Speech."
        },
        "typeofchar": {
            "name": "$typeOfChar",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/typeofchar",
            "description": "Returns the type of character in the function. Must be only 1 character!",
            "usage": "$typeOfChar[character]",
            "property": "`character` - Define a character to check for.\n \n__**Outputs:**__\n- letter\n- number\n- symbol"
        },
        "unban": {
            "name": "$unban",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/unban",
            "description": "Allows you to unban a user from a guild. 3rd field may be optional with a reason.",
            "usage": "$unban[userID]\n$unban[userID;guildID]\n$unban[userID;guildID;reason]",
            "property": "`userID` - ID of the user to unban.\n`guildID` - The ID of the guild where you want the ban to be lifted.\n`reason` - Optional reason that logs in the audit log."
        },
        "uppercasecount": {
            "name": "$uppercaseCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/uppercasecount",
            "description": "Returns the amount of uppercase characters in the content",
            "usage": "$uppercaseCount[input]",
            "property": "`input` - The content to count."
        },
        "uptime": {
            "name": "$uptime",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/uptime",
            "description": "Returns how long the bot has been online for.",
            "usage": "$uptime"
        },
        "usechannel": {
            "name": "$useChannel",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/usechannel",
            "description": "Sends the executed command to the defined channel.",
            "usage": "$useChannel[channelID]",
            "property": "`channelID` - The ID of the channel to send the executed the command to."
        },
        "user": {
            "name": "$user",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/user",
            "description": "A `Compact Function` pertaining to a Discord user with `14` options to choose from.",
            "usage": "$user[userID;option]",
            "property": "`userID` - Define a user with the ID.\n`option` - Define a message with the ID.\n \n__**Options:**__\n- avatar\n- banner\n- created\n- discrim\n- id\n- isbot\n- istyping\n- lastmessagechannelid\n- lastmessageid\n- lastmessageurl\n- mention\n- name\n- tag\n- timestamp"
        },
        "useravatar": {
            "name": "$userAvatar",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/useravatar",
            "description": "Returns the avatar image of a user.",
            "usage": "$userAvatar\n$userAvatar[]\n$userAvatar[userID]\n$userAvatar[userID;size]\n$userAvatar[userID;size;format]",
            "property": "Leave brackets empty to return the command authors avatar. Same as no brackets and {hyper:$authorAvatar:https://docs.db-script.xyz/functions/data/authoravatar} for diversity.\n`userID` - The ID of the user to return the avatar image of.\n`size` - The size of the returned image. Follow the table in the docs. May be optional\n`format` - The image format. Follow the table in the docs. May be optional"
        },
        "userbanner": {
            "name": "$userBanner",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userbanner",
            "description": "Returns the banner image applied to a users profile (Nitro Premium users only). Otherwise the function will return `undefined`",
            "usage": "$userBanner\n$userBanner[userID]",
            "property": " Leave brackets empty to return the command author's banner. Same as no brackets.\n`userID` - The ID of a valid user."
        },
        "userexists": {
            "name": "$userExists",
            "type": "condition",
            "url": "https://docs.db-script.xyz/functions/conditions/userexists",
            "description": "Returns `true` if the ID of the user exists in Discord. Otherwise, the function returns `false`.",
            "usage": "$userExists[userID]",
            "property": "`userID` - The user being checked for."
        },
        "userid": {
            "name": "$userID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userid",
            "description": "Returns the ID of the user by the defined username.",
            "usage": "$userID\n$userID[]\n$userID[name]",
            "property": " Leave brackets empty to return the command author's ID. Same as no brackets.\n`name` - Define a user's name (not nickname) to return the ID of that user."
        },
        "userleaderboard": {
            "name": "$userLeaderboard",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userleaderboard",
            "description": "Returns a leaderboard for the specified user variable in either an ascending or descending state.",
            "usage": "$userLeaderboard[variable;asc;placeholders]\n$userLeaderboard[variable;desc;placeholders]",
            "property": "`variable` - The variable to display a leaderboard of.\n`asc` - Returns the data in an ascending state, from highest on top.\n`desc` - Returns the data in a descending state, from lowest on top.\n \n`placeholders:`\n`{top}` - The value sitting in 1st place whether asc or desc.\n`{value}` - The variables value.\n`{username}` - The username associated with that stat.\n`{id}` - The users ID associated with that stat.\n`{tag}` - The users tag associated with that stat."
        },
        "username": {
            "name": "$username",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/username",
            "description": "Returns the username of the command author or the defined user ID.",
            "usage": "$username\n$username[]\n$username[userID]",
            "property": "Leave brackets empty to return the username of the command author.\n`userID` - The ID of the user to return the username of."
        },
        "userstatus": {
            "name": "$userStatus",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/userstatus",
            "description": "A `Compact Function` pertaining to a user's status with `7` options to choose from. Returns parts of a users status (If one is set).",
            "usage": "$userStatus[userID;option]",
            "property": "`userID` - The ID of the user you're checking the status of.\n`option` - The option to return the data from.\n \n__**Options:**__\n- state\n- emoji\n- type\n- activityname\n- started\n- status\n- details"
        },
        "userstyping": {
            "name": "$usersTyping",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userstyping",
            "description": "Lists the users currently typing in the current or defined channel.",
            "usage": "$usersTyping[]\n$usersTyping[channelID]\n$usersTyping[channelID;separator]",
            "property": "Leave brackets empty to return the users typing in the channel the command is executed in.\n`channelID` - The ID of the channel to search for users typing and returns those users names.\n`separator` - The separator that separates each user. Defaults to being separated by a comma."
        },
        "userswithnickname": {
            "name": "$usersWithNickname",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithnickname",
            "description": "Returns a list of users with the same nickname as the defined input.",
            "usage": "$userWithNickname[]\n$usersWithNickname[nickname]\n$usersWithNickname[nickname;guildID]",
            "property": "Leave the brackets empty to define the command author's nickname.\n`nick` - The nickname to match other users.\n`guildID` - The ID of the guild for the bot to check for nicknames."
        },
        "userswithnicknamecount": {
            "name": "$usersWithNicknameCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithnicknamecount",
            "description": "Returns the amount of users with the defined nickname.",
            "usage": "$usersWithNicknameCount[]\n$usersWithNicknameCount[nickname]\n$usersWithNicknameCount[nickname;guildID]",
            "property": "Leave brackets empty to match the nickname of the command author.\n`nick` - Supply a valid nickname. Leave the brackets blank to define the command author's nickname.\n`guildID` - Specific guild for the bot to check for nicknames."
        },
        "userswithrole": {
            "name": "$usersWithRole",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithrole",
            "description": "Returns all the users wearing a specific role. Returns `None` if no one is wearing the defined role.",
            "usage": "$usersWithRole[roleID]\n$usersWithRole[roleID;guildID]",
            "property": "`roleID` - Supply a role ID to get all the users wearing that role.\n`guildID` - The ID of the guild where the role can be found."
        },
        "userswithrolecount": {
            "name": "$usersWithRoleCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithrolecount",
            "description": "Returns the amount of users wearing the defined role.",
            "usage": "$usersWithRoleCount[roleID]\n$usersWithRoleCount[roleID;guildID]",
            "property": "`roleID` - Supply a role ID to return the number of users wearing that role.\n`guildID` - The ID of the guild where the role can be found."
        },
        "userswithtag": {
            "name": "$usersWithTag",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithtag",
            "description": "Returns all the users with a specific discriminator. Returns `None` if no one has the defined discriminator.",
            "usage": "$usersWithTag[]\n$usersWithTag[discrim]\n$usersWithTag[discrim;guildID]",
            "property": "Leave brackets empty to match the command authors discriminator.\n`discriminator` - Supply a valid discriminator.\n`guildID` - The ID of the guild the function will search through."
        },
        "userswithtagcount": {
            "name": "$usersWithTagCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/userswithtagcount",
            "description": "Returns the amount of users with the defined discriminator.",
            "usage": "$usersWithTagCount[]\n$usersWithTagCount[discrim]\n$usersWithTagCount[discrim;guildID]",
            "property": "Leave brackets empty to match the command authors discriminator.\n`discriminator` - Supply a valid discriminator.\n`guildID` - The ID of the guild the function will search through."
        },
        "vckick": {
            "name": "$vcKick",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/vckick",
            "description": "Kicks a user from a voice channel. The user must be connected to a voice channel in the defined guild to work.",
            "usage": "$vcKick[guildID;userID]",
            "property": "`guildID` - The ID of the guild where the user is located and and connected to a voice channel.\n`userID` - The ID of the user connected to a voice channel."
        },
        "vcmove": {
            "name": "$vcMove",
            "type": "action",
            "url": "https://docs.db-script.xyz/functions/action/vcmove",
            "description": "Moves a user from one voice channel to another. The user must already be connected to a voice channel in the defined guild to work.",
            "usage": "$vcMove[guildID;userID;channelID]",
            "property": "`guildID` - The ID of the guild where the user and channel is located and where the action will take place.\n`userID` - The ID of the user already connected to a voice channel.\n`channelID` - The ID of the voice channel where the user will be moved to."
        },
        "voice": {
            "name": "$voice",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/voice",
            "description": "A `Compact Function` pertaining to voice channels with `21` options to choose from.",
            "usage": "$voice[id;option]",
            "property": "`id` - The ID of the voice channel to return the data from.\n`option` - Define the property by its name.\n \n__**Options:**__\n- bitrate\n- created\n- guildid\n- guildname\n- id\n- isdeletable\n- isdeleted\n- isfull\n- isjoinable\n- ismanageable\n- isspeakable\n- isviewable\n- name\n- parentid\n- parentname\n- position\n- rawposition\n- timestamp\n- topic\n- type\n- userlimit"
        },
        "voicechannelcount": {
            "name": "$voiceChannelCount",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/voicechannelcount",
            "description": "Returns the total number of voice channels in a guild.",
            "usage": "$voiceChannelCount\n$voiceChannelCount[]\n$voiceChannelCount[guildID]",
            "property": "Leave brackets empty to return the total number of voice channels in the current guild. Same as no brackets.\n`guildID` - The ID of the guild for the function to count the voice channels of."
        },
        "voicechannelposition": {
            "name": "$voiceChannelPosition",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/voicechannelposition",
            "description": "Returns the raw position of voice channels.",
            "usage": "$voiceChannelPosition[channelID]",
            "property": "`channelID` - The ID of the channel to return the position of."
        },
        "voiceid": {
            "name": "$voiceID",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/voiceid",
            "description": "Returns the voice channel ID of the defined user. Returns `undefined` if the user is not in a voice channel.",
            "usage": "$voiceID\n$voiceID[]\n$voiceID[userID]\n$voiceID[userID;guildID]",
            "property": "Leave brackets empty to define the command author. Same as no brackets.\n`userID` - Define the user with their ID.\n`guildID` - Define the guild with its ID."
        },
        "voiceinfo": {
            "name": "$voiceInfo",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/voiceinfo",
            "description": "A `Compact Function` that returns information about a users voice connection status in a voice channel with `4` options to choose from.",
            "usage": "$voiceInfo[guildID;userID;option]",
            "property": "`userID` - The ID of a user to get voice info from.\n`guildID` - The ID of a guild to get users voice info from.\n`option` - Define an option to get that data from a user.\n \n__**Options:**__\n- stream\n- speak\n- mute\n- deaf"
        },
        "volume": {
            "name": "$volume",
            "type": "music",
            "url": "https://docs.db-script.xyz/functions/music/volume",
            "description": "Sets the volume of the currently playing audio to the desired level.",
            "usage": "$volume[number]",
            "property": "`number` - The number to set the volume to. 0 - 100"
        },
        "webhook": {
            "name": "$webhook",
            "type": "compact",
            "url": "https://docs.db-script.xyz/functions/compacts/webhook",
            "description": "A `Compact Function` pertaining to information on a webhook with `10` options to choose from.",
            "usage": "$webhook[hookURL;option]",
            "property": "`hookURL` - Define an existing webhookURL.\n`option` - Define an option to get webhook data from.\n \n__**Options:**__\n- avatar\n- channelid\n- created\n- exists\n- guild\n- id\n- name\n- token\n- type\n- url"
        },
        "weekday": {
            "name": "$weekday",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/weekday",
            "description": "Returns the current day of the week.\n \n__**Outputs:**__\n- Monday\n- Tuesday\n- Wednesday\n- Thursday\n- Friday\n- Saturday\n- Sunday",
            "usage": "$weekday"
        },
        "weekinyear": {
            "name": "$weekInYear",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/weekinyear",
            "description": "Returns the current week of the year as a number. There's typically 52 weeks in 1 year.",
            "usage": "$weekInYear"
        },
        "year": {
            "name": "$year",
            "type": "data",
            "url": "https://docs.db-script.xyz/functions/data/year",
            "description": "Returns the current year we are in.",
            "usage": "$year"
        },
        "bancommand": {
            "name": "bot.BanCommand\nbot.onBan()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/bancommand",
            "description": "Triggers when a guild member is banned from the guild in any fashion. Great for ban logs!",
            "property": "__**No Handler:**__ *`bot.onBan()` callback goes under the event!*\n```bot.BanCommand({\nname: \"channel ID\",\ncode: `\n$tag has been banned from $guildName!\n`\n})\nbot.onBan()```\n \n__**With Handler:**__ *`bot.onBan()` callback goes in main file!*\n```module.exports.BanCommand = ({\nname: \"channel ID\",\ncode: `\n$tag has been banned from $guildName!\n`\n})```"
        },
        "onban": {
            "name": "bot.BanCommand\nbot.onBan()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/bancommand",
            "description": "Triggers when a guild member is banned from the guild in any fashion. Great for ban logs!",
            "property": "__**No Handler:**__ *`bot.onBan()` callback goes under the event!*\n```bot.BanCommand({\nname: \"channel ID\",\ncode: `\n$tag has been banned from $guildName!\n`\n})\nbot.onBan()```\n \n__**With Handler:**__ *`bot.onBan()` callback goes in main file!*\n```module.exports.BanCommand = ({\nname: \"channel ID\",\ncode: `\n$tag has been banned from $guildName!\n`\n})```"
        },
        "unbancommand": {
            "name": "bot.unbanCommand\nbot.onUnban()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/unbancommand",
            "description": "Triggers when a guild member is unbanned from the guild in any fashion. Great for ban logs!",
            "property": "__**No Handler:**__ *`bot.onUnban()` callback goes under the event!*\n```bot.UnbanCommand({\nname: \"channel ID\",\ncode: `\n$tag has been unbanned from $guildName!\n`\n})\nbot.onUnban()```\n \n__**With Handler:**__ *`bot.onUnban()` callback goes in main file!*\n```module.exports.UnbanCommand = ({\nname: \"channel ID\",\ncode: `\n$tag has been unbanned from $guildName!\n`\n})```"
        },
        "onunban": {
            "name": "bot.BanCommand\nbot.onBan()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/bancommand",
            "description": "Triggers when a guild member is unbanned from the guild in any fashion. Great for ban logs!",
            "property": "__**No Handler:**__ *`bot.onUnban()` callback goes under the event!*\n```bot.UnbanCommand({\nname: \"channel ID\",\ncode: `\n$tag has been unbanned from $guildName!\n`\n})\nbot.onUnban()```\n \n__**With Handler:**__ *`bot.onUnban()` callback goes in main file!*\n```module.exports.UnbanCommand = ({\nname: \"channel ID\",\ncode: `\n$tag has been unbanned from $guildName!\n`\n})```"
        },
        "joinedcommand": {
            "name": "bot.JoinedCommand\nbot.onJoined()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/joinedcommand",
            "description": "Triggers when an member joins a guild.",
            "property": "__**No Handler:**__ *`bot.onJoined()` callback goes under the event!*\n```bot.JoinedCommand({\nname: \"channel ID\",\ncode: `\n$tag just joined $guildName\n`\n})\nbot.onJoined()```\n \n__**With Handler:**__ *`bot.onJoined()` callback goes in main file!*\n```module.exports.JoinedCommand = ({\nname: \"channel ID\",\ncode: `\n$tag just joined $guildName\n`\n})```"
        },
        "onjoined": {
            "name": "bot.JoinedCommand\nbot.onJoined()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/joinedcommand",
            "description": "Triggers when an member joins a guild.",
            "property": "__**No Handler:**__ *`bot.onJoined()` callback goes under the event!*\n```bot.JoinedCommand({\nname: \"channel ID\",\ncode: `\n$tag just joined $guildName\n`\n})\nbot.onJoined()```\n \n__**With Handler:**__ *`bot.onJoined()` callback goes in main file!*\n```module.exports.JoinedCommand = ({\nname: \"channel ID\",\ncode: `\n$tag just joined $guildName\n`\n})```"
        },
        "leavecommand": {
            "name": "bot.LeaveCommand\nbot.onLeave()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/leavecommand",
            "description": "Triggers when an member leave a guild.",
            "property": "__**No Handler:**__ *`bot.onLeave()` callback goes under the event!*\n```bot.LeaveCommand({\nname: \"channel ID\",\ncode: `\n$tag just left $guildName\n`\n})\nbot.onLeave()```\n \n__**With Handler:**__ *`bot.onLeave()` callback goes in main file!*\n```module.exports.LeaveCommand = ({\nname: \"channel ID\",\ncode: `\n$tag just left $guildName\n`\n})```"
        },
        "onleave": {
            "name": "bot.LeaveCommand\nbot.onLeave()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/leavecommand",
            "description": "Triggers when an member leave a guild.",
            "property": "__**No Handler:**__ *`bot.onLeave()` callback goes under the event!*\n```bot.LeaveCommand({\nname: \"channel ID\",\ncode: `\n$tag just left $guildName\n`\n})\nbot.onLeave()```\n \n__**With Handler:**__ *`bot.onLeave()` callback goes in main file!*\n```module.exports.LeaveCommand = ({\nname: \"channel ID\",\ncode: `\n$tag just left $guildName\n`\n})```"
        },
        "messagedeletecommand": {
            "name": "bot.MessageDeleteCommand\nbot.onMessageDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/messagedeletecommand",
            "description": "Triggers when a message is deleted from a guild channel. The {hyper:$message:https://docs.db-script.xyz/functions/data/message} function can be used to retrieve the content from the deleted message!",
            "property": "__**No Handler:**__ *`bot.onMessageDelete()` callback goes under the event!*\n```bot.MessageDeleteCommand({\nname: \"channel ID\",\ncode: `\n<@$authorID> has deleted a message!\n`\n})\nbot.onMessageDelete()```\n \n__**With Handler:**__ *`bot.onMessageDelete()` callback goes in main file!*\n```module.exports.MessageDeleteCommand = ({\nname: \"channel ID\",\ncode: `\n<@$authorID> has deleted a message!\n`\n})```"
        },
        "onmessagedelete": {
            "name": "bot.MessageDeleteCommand\nbot.onMessageDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/messagedeletecommand",
            "description": "Triggers when a message is deleted from a guild channel. The {hyper:$message:https://docs.db-script.xyz/functions/data/message} function can be used to retrieve the content from the deleted message!",
            "property": "__**No Handler:**__ *`bot.onMessageDelete()` callback goes under the event!*\n```bot.MessageDeleteCommand({\nname: \"channel ID\",\ncode: `\n<@$authorID> has deleted a message!\n`\n})\nbot.onMessageDelete()```\n \n__**With Handler:**__ *`bot.onMessageDelete()` callback goes in main file!*\n```module.exports.MessageDeleteCommand = ({\nname: \"channel ID\",\ncode: `\n<@$authorID> has deleted a message!\n`\n})```"
        },
        "botjoincommand": {
            "name": "bot.BotJoinCommand\nbot.onBotJoin()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/botjoincommand",
            "description": "Triggers when the bot joins a server. Great for bot join logs!",
            "property": "__**No Handler:**__ *`bot.onBotJoin()` callback goes under the event!*\n```bot.BotJoinCommand({\nname: \"channel ID\",\ncode: `\nThanks for inviting me!!\n`\n})\nbot.onBotJoin()```\n \n__**With Handler:**__ *`bot.onBotJoin()` callback goes in main file!*\n```module.exports.BotJoinCommand = ({\nname: \"channel ID\",\ncode: `\nThanks for inviting me!!\n`\n})```"
        },
        "onbotjoin": {
            "name": "bot.BotJoinCommand\nbot.onBotJoin()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/botjoincommand",
            "description": "Triggers when the bot joins a server. Great for bot join logs!",
            "property": "__**No Handler:**__ *`bot.onBotJoin()` callback goes under the event!*\n```bot.BotJoinCommand({\nname: \"channel ID\",\ncode: `\nThanks for inviting me!!\n`\n})\nbot.onBotJoin()```\n \n__**With Handler:**__ *`bot.onBotJoin()` callback goes in main file!*\n```module.exports.BotJoinCommand = ({\nname: \"channel ID\",\ncode: `\nThanks for inviting me!!\n`\n})```"
        },
        "botleavecommand": {
            "name": "bot.BotLeaveCommand\nbot.onBotLeave()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/botleavecommand",
            "description": "Triggers when the bot is forced to leave the server for any reason.",
            "property": "__**No Handler:**__ *`bot.onBotLeave()` callback goes under the event!*\n```bot.BotLeaveCommand({\nname: \"channel ID\",\ncode: `\nI have left $guildName\n`\n})\nbot.onBotLeave()```\n \n__**With Handler:**__ *`bot.onBotLeave()` callback goes in main file!*\n```module.exports.BotLeaveCommand = ({\nname: \"channel ID\",\ncode: `\nI have left $guildName\n`\n})```"
        },
        "onbotleave": {
            "name": "bot.BotLeaveCommand\nbot.onBotLeave()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/botleavecommand",
            "description": "Triggers when the bot is forced to leave the server for any reason.",
            "property": "__**No Handler:**__ *`bot.onBotLeave()` callback goes under the event!*\n```bot.BotLeaveCommand({\nname: \"channel ID\",\ncode: `\nI have left $guildName\n`\n})\nbot.onBotLeave()```\n \n__**With Handler:**__ *`bot.onBotLeave()` callback goes in main file!*\n```module.exports.BotLeaveCommand = ({\nname: \"channel ID\",\ncode: `\nI have left $guildName\n`\n})```"
        },
        "channelcreatecommand": {
            "name": "bot.ChannelCreateCommand\nbot.onChannelCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channelcreatecommand",
            "description": "Triggers when a channel is created in a guild. 11 Placeholders can be used to retrieve data from the created channel.",
            "property": "__**No Handler:**__ *`bot.onChannelCreate()` callback goes under the event!*\n```bot.ChannelCreateCommand({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just created!\n`\n})\nbot.onChannelCreate()```\n \n__**With Handler:**__ *`bot.onChannelCreate()` callback goes in main file!*\n```module.exports.ChannelCreateCommand = ({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just created!\n`\n})```",
            "placeholders": "`{id}` - channel id\n`{name}` - channel name\n`{mention}` - channel mention\n`{type}` - channel type\n`{parentposition}` - position in category\n`{rawposition}` - position in channel list\n`{parentid}` - category id of the channel\n`{parentname}` - category name of the channel\n`{guildid}` - guild id of where the channel is created\n`{guildname}` -  guild name of where the channel is created\n`{created}` - date of the creation of the channel"
        },
        "onchannelcreate": {
            "name": "bot.ChannelCreateCommand\nbot.onChannelCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channelcreatecommand",
            "description": "Triggers when a channel is created in a guild. 11 Placeholders can be used to retrieve data from the created channel.",
            "property": "__**No Handler:**__ *`bot.onChannelCreate()` callback goes under the event!*\n```bot.ChannelCreateCommand({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just created!\n`\n})\nbot.onChannelCreate()```\n \n__**With Handler:**__ *`bot.onChannelCreate()` callback goes in main file!*\n```module.exports.ChannelCreateCommand = ({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just created!\n`\n})```",
            "placeholders": "`{id}` - channel id\n`{name}` - channel name\n`{mention}` - channel mention\n`{type}` - channel type\n`{parentposition}` - position in category\n`{rawposition}` - position in channel list\n`{parentid}` - category id of the channel\n`{parentname}` - category name of the channel\n`{guildid}` - guild id of where the channel is created\n`{guildname}` -  guild name of where the channel is created\n`{created}` - date of the creation of the channel"
        },
        "channeldeletecommand": {
            "name": "bot.ChannelDeleteCommand\nbot.onChannelDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channeldeletecommand",
            "description": "Triggers when a channel is deleted from a guild. 11 Placeholders can be used to retrieve data from the deleted channel.",
            "property": "__**No Handler:**__ *`bot.onChannelDelete()` callback goes under the event!*\n```bot.ChannelDeleteCommand({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just deleted!\n`\n})\nbot.onChannelDelete()```\n \n__**With Handler:**__ *`bot.onChannelDelete()` callback goes in main file!*\n```module.exports.ChannelDeleteCommand = ({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just deleted!\n`\n})```",
            "placeholders": "`{id}` - channel id\n`{name}` - channel name\n`{type}` - channel type\n`{parentposition}` - position in category when deleted\n`{rawposition}` - position in channel list when deleted\n`{parentid}` - category id of the channel\n`{parentname}` - category name of the channel when deleted\n`{guildid}` - guild id of where the channel is deleted\n`{guildname}` guild name of where the channel is deleted\n`{created}` - date of the creation of the channel\n`{timestamp}` - how long ago the channel was created"
        },
        "onchanneldelete": {
            "name": "bot.ChannelDeleteCommand\nbot.onChannelDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channeldeletecommand",
            "description": "Triggers when a channel is deleted from a guild. 11 Placeholders can be used to retrieve data from the deleted channel.",
            "property": "__**No Handler:**__ *`bot.onChannelDelete()` callback goes under the event!*\n```bot.ChannelDeleteCommand({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just deleted!\n`\n})\nbot.onChannelDelete()```\n \n__**With Handler:**__ *`bot.onChannelDelete()` callback goes in main file!*\n```module.exports.ChannelDeleteCommand = ({\nname: \"channel ID\",\ncode: `\n{name} channel in {guildname} was just deleted!\n`\n})```",
            "placeholders": "`{id}` - channel id\n`{name}` - channel name\n`{type}` - channel type\n`{parentposition}` - position in category when deleted\n`{rawposition}` - position in channel list when deleted\n`{parentid}` - category id of the channel\n`{parentname}` - category name of the channel when deleted\n`{guildid}` - guild id of where the channel is deleted\n`{guildname}` guild name of where the channel is deleted\n`{created}` - date of the creation of the channel\n`{timestamp}` - how long ago the channel was created"
        },
        "channelupdatecommand": {
            "name": "bot.ChannelUpdateCommand\nbot.onChannelUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channelupdatecommand",
            "description": "Triggers when a channel is updated in a guild. 13 Placeholders can be used to retrieve data from the updated channel.",
            "property": "__**No Handler:**__ *`bot.onChannelUpdate()` callback goes under the event!*\n```bot.ChannelUpdateCommand({\nname: \"channel ID\",\ncode: `\nChannel name has been updated!\nOld: {oldname}\nNew: {newname}\n`\n})\nbot.onChannelUpdate()```\n \n__**With Handler:**__ *`bot.onChannelUpdate()` callback goes in main file!*\n```module.exports.ChannelUpdateCommand = ({\nname: \"channel ID\",\ncode: `\nChannel name has been updated!\nOld: {oldname}\nNew: {newname}\n`\n})```",
            "placeholders": "`{oldname}` - Before the change\n`{newname}` - After the change\n`{oldtopic}` - Before the change\n`{newtopic}` - After the change\n`{oldtype}` - Before the change\n`{newtype}` - After the change\n`{oldposition}` - Before the change\n`{newposition}` - After the change\n`{oldparentid}` - Before the change\n`{newparentid}` - After the change\n`{id}` - The ID of the channel\n`{mention}` - The channel mention\n`{guildid}` - The ID of the guild where the channel belongs to"
        },
        "onchannelupdate": {
            "name": "bot.ChannelUpdateCommand\nbot.onChannelUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/channelupdatecommand",
            "description": "Triggers when a channel is updated in a guild. 13 Placeholders can be used to retrieve data from the updated channel.",
            "property": "__**No Handler:**__ *`bot.onChannelUpdate()` callback goes under the event!*\n```bot.ChannelUpdateCommand({\nname: \"channel ID\",\ncode: `\nChannel name has been updated!\nOld: {oldname}\nNew: {newname}\n`\n})\nbot.onChannelUpdate()```\n \n__**With Handler:**__ *`bot.onChannelUpdate()` callback goes in main file!*\n```module.exports.ChannelUpdateCommand = ({\nname: \"channel ID\",\ncode: `\nChannel name has been updated!\nOld: {oldname}\nNew: {newname}\n`\n})```",
            "placeholders": "`{oldname}` - Before the change\n`{newname}` - After the change\n`{oldtopic}` - Before the change\n`{newtopic}` - After the change\n`{oldtype}` - Before the change\n`{newtype}` - After the change\n`{oldposition}` - Before the change\n`{newposition}` - After the change\n`{oldparentid}` - Before the change\n`{newparentid}` - After the change\n`{id}` - The ID of the channel\n`{mention}` - The channel mention\n`{guildid}` - The ID of the guild where the channel belongs to"
        },
        "emojicreatecommand": {
            "name": "bot.EmojiCreateCommand\nbot.onEmojiCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/emojicreatecommand",
            "description": "Triggers when an emoji is created in a guild. 8 Placeholders can be used to retrieve data from the created emoji.",
            "property": "__**No Handler:**__ *`bot.onEmojiCreate()` callback goes under the event!*\n```bot.EmojiCreateCommand({\nname: \"channel ID\",\ncode: `\n{emoji} was created in {guildname}\n`\n})\nbot.onEmojiCreate()```\n \n__**With Handler:**__ *`bot.onEmojiCreate()` callback goes in main file!*\n```module.exports.EmojiCreateCommand = ({\nname: \"channel ID\",\ncode: `\n{emoji} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - emoji id\n`{name}` - emoji name\n`{url}` - emoji mention\n`{emoji}` - emoji image url\n`{isanimated}` - true or false\n`{guildid}` - guild id of where the emoji is created\n`{guildname}` guild name of where the emoji is created\n`{created}` - date of the creation of the emoji"
        },
        "onemojicreate": {
            "name": "bot.EmojiCreateCommand\nbot.onEmojiCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/emojicreatecommand",
            "description": "Triggers when an emoji is created in a guild. 8 Placeholders can be used to retrieve data from the created emoji.",
            "property": "__**No Handler:**__ *`bot.onEmojiCreate()` callback goes under the event!*\n```bot.EmojiCreateCommand({\nname: \"channel ID\",\ncode: `\n{emoji} was created in {guildname}\n`\n})\nbot.onEmojiCreate()```\n \n__**With Handler:**__ *`bot.onEmojiCreate()` callback goes in main file!*\n```module.exports.EmojiCreateCommand = ({\nname: \"channel ID\",\ncode: `\n{emoji} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - emoji id\n`{name}` - emoji name\n`{url}` - emoji mention\n`{emoji}` - emoji image url\n`{isanimated}` - true or false\n`{guildid}` - guild id of where the emoji is created\n`{guildname}` guild name of where the emoji is created\n`{created}` - date of the creation of the emoji"
        },
        "emojideletecommand": {
            "name": "bot.EmojiDeleteCommand\nbot.onEmojiDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/emojideletecommand",
            "description": "Triggers when an emoji is deleted from a guild. 8 Placeholders can be used to retrieve data from the deleted emoji.",
            "property": "__**No Handler:**__ *`bot.onEmojiDelete()` callback goes under the event!*\n```bot.EmojiDeleteCommand({\nname: \"channel ID\",\ncode: `\nThe emoji ( {name} ) was deleted in {guildname}\n`\n})\nbot.onEmojiDelete()```\n \n__**With Handler:**__ *`bot.onEmojiDelete()` callback goes in main file!*\n```module.exports.EmojiDeleteCommand = ({\nname: \"channel ID\",\ncode: `\nThe emoji ( {name} ) was deleted in {guildname}\n`\n})```",
            "placeholders": "`{id}` - emoji id\n`{name}` - emoji name\n`{url}` - emoji mention\n`{isanimated}` - true or false\n`{guildid}` - guild id of where the emoji is created\n`{guildname}` guild name of where the emoji is created\n`{created}` - date of the creation of the emoji\n`{timestamp}` - how long ago the emoji was created before deletion"
        },
        "onemojidelete": {
            "name": "bot.EmojiDeleteCommand\nbot.onEmojiDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/emojideletecommand",
            "description": "Triggers when an emoji is deleted from a guild. 8 Placeholders can be used to retrieve data from the deleted emoji.",
            "property": "__**No Handler:**__ *`bot.onEmojiDelete()` callback goes under the event!*\n```bot.EmojiDeleteCommand({\nname: \"channel ID\",\ncode: `\nThe emoji ( {name} ) was deleted in {guildname}\n`\n})\nbot.onEmojiDelete()```\n \n__**With Handler:**__ *`bot.onEmojiDelete()` callback goes in main file!*\n```module.exports.EmojiDeleteCommand = ({\nname: \"channel ID\",\ncode: `\nThe emoji ( {name} ) was deleted in {guildname}\n`\n})```",
            "placeholders": "`{id}` - emoji id\n`{name}` - emoji name\n`{url}` - emoji mention\n`{isanimated}` - true or false\n`{guildid}` - guild id of where the emoji is created\n`{guildname}` guild name of where the emoji is created\n`{created}` - date of the creation of the emoji\n`{timestamp}` - how long ago the emoji was created before deletion"
        },
        "guildupdatecommand": {
            "name": "bot.GuildUpdateCommand\nbot.onGuildUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/guildupdatecommand",
            "description": "Triggers when a guild has updated one of its attributes. 32 Placeholders can be used to retrieve the changed data.",
            "property": "__**No Handler:**__ *`bot.onGuildUpdate()` callback goes under the event!*\n```bot.GuildUpdateCommand({\nname: \"channel ID\",\ncode: `\n$guildName changed their system channel!\nOld: {oldsystemchannel}\nNew: {newsystemchannel}\n`\n})\nbot.onGuildUpdate()```\n \n__**With Handler:**__ *`bot.onGuildUpdate()` callback goes in main file!*\n```module.exports.GuildUpdateCommand = ({\nname: \"channel ID\",\ncode: `\n$guildName changed their system channel!\nOld: {oldsystemchannel}\nNew: {newsystemchannel}\n`\n})```",
            "placeholders": "`{oldname}` & `{newname}`\n`{oldicon}` & `{newicon}`\n`{oldowner}` & `{newowner}`\n`{oldafkchannel}` & `{newafkchannel}`\n`{oldtimeout}` & `{newtimeout}`\n`{oldupdateschannel}` & `{newupdateschannel}`\n`{oldruleschannel}` & `{newruleschannel}`\n`{oldsystemchannel}` & `{newsystemchannel}`\n`{olddescription}` & `{newdescription}`\n`{oldnotifications}` & `{newnotifications}`\n`{oldexplicitfilter}` & `{newexplicitfilter}`\n`{oldverificationlvl}` & `{newverificationlvl}`\n`{oldmfa}` & `{newmfa}`\n`{oldregion}` & `{newregion}`\n`{oldlocale}` & `{newlocale}`\n`{oldpartnered}` & `{newpartnered}`\n`{oldverified}` & `{newverified}`\n`{oldvanity}` & `{newvanity}`"
        },
        "onguildupdate": {
            "name": "bot.GuildUpdateCommand\nbot.onGuildUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/guildupdatecommand",
            "description": "Triggers when a guild has updated one of its attributes. 32 Placeholders can be used to retrieve the changed data.",
            "property": "__**No Handler:**__ *`bot.onGuildUpdate()` callback goes under the event!*\n```bot.GuildUpdateCommand({\nname: \"channel ID\",\ncode: `\n$guildName changed their system channel!\nOld: {oldsystemchannel}\nNew: {newsystemchannel}\n`\n})\nbot.onGuildUpdate()```\n \n__**With Handler:**__ *`bot.onGuildUpdate()` callback goes in main file!*\n```module.exports.GuildUpdateCommand = ({\nname: \"channel ID\",\ncode: `\n$guildName changed their system channel!\nOld: {oldsystemchannel}\nNew: {newsystemchannel}\n`\n})```",
            "placeholders": "`{oldname}` & `{newname}`\n`{oldicon}` & `{newicon}`\n`{oldowner}` & `{newowner}`\n`{oldafkchannel}` & `{newafkchannel}`\n`{oldtimeout}` & `{newtimeout}`\n`{oldupdateschannel}` & `{newupdateschannel}`\n`{oldruleschannel}` & `{newruleschannel}`\n`{oldsystemchannel}` & `{newsystemchannel}`\n`{olddescription}` & `{newdescription}`\n`{oldnotifications}` & `{newnotifications}`\n`{oldexplicitfilter}` & `{newexplicitfilter}`\n`{oldverificationlvl}` & `{newverificationlvl}`\n`{oldmfa}` & `{newmfa}`\n`{oldregion}` & `{newregion}`\n`{oldlocale}` & `{newlocale}`\n`{oldpartnered}` & `{newpartnered}`\n`{oldverified}` & `{newverified}`\n`{oldvanity}` & `{newvanity}`"
        },
        "ratelimitcommand": {
            "name": "bot.RateLimitCommand\nbot.onRateLimit()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/ratelimitcommand",
            "description": "Triggers when the bot becomes rate limited by the API. 6 Placeholders will return data for you. Typically meant for bot developer use and not intentionally meant for a public structure.",
            "property": "__**No Handler:**__ *`bot.onRateLimit()` callback goes under the event!*\n```bot.RateLimitCommand({\nname: \"channel ID\",\ncode: `\nI have been rate limited for {for}\n`\n})\nbot.onRateLimit()```\n \n__**With Handler:**__ *`bot.onRateLimit()` callback goes in main file!*\n```module.exports.RateLimitCommand = ({\nname: \"channel ID\",\ncode: `\nI have been rate limited for {for}\n`\n})```",
            "placeholders": "`{for}` - For how long the bot is rate limited\n`{until}` - When the bot will no longer be rate limited\n`{limit}` - How many requests/actions can be made to this gateway\n`{method}` - Method used to the gateway (eg. edit msg rate limit = patch method)\n`{where}` - Path used for request that triggered this event\n`{route}` - Route used for request that triggered this event"
        },
        "onratelimit": {
            "name": "bot.RateLimitCommand\nbot.onRateLimit()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/ratelimitcommand",
            "description": "Triggers when the bot becomes rate limited by the API. 6 Placeholders will return data for you. Typically meant for bot developer use and not intentionally meant for a public structure.",
            "property": "__**No Handler:**__ *`bot.onRateLimit()` callback goes under the event!*\n```bot.RateLimitCommand({\nname: \"channel ID\",\ncode: `\nI have been rate limited for {for}\n`\n})\nbot.onRateLimit()```\n \n__**With Handler:**__ *`bot.onRateLimit()` callback goes in main file!*\n```module.exports.RateLimitCommand = ({\nname: \"channel ID\",\ncode: `\nI have been rate limited for {for}\n`\n})```",
            "placeholders": "`{for}` - For how long the bot is rate limited\n`{until}` - When the bot will no longer be rate limited\n`{limit}` - How many requests/actions can be made to this gateway\n`{method}` - Method used to the gateway (eg. edit msg rate limit = patch method)\n`{where}` - Path used for request that triggered this event\n`{route}` - Route used for request that triggered this event"
        },
        "reactionaddcommand": {
            "name": "bot.ReactionAddCommand\nbot.onReactionAdd()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/reactionaddcommand",
            "description": "An event that fires when a user reacts to a message. 13 Placeholders can be used to return data about the reaction.",
            "property": "__**No Handler:**__ *`bot.onReactionAdd()` callback goes under the event!*\n```bot.ReactionAddCommand({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})\nbot.onReactionAdd()```\n \n__**With Handler:**__ *`bot.onReactionAdd()` callback goes in main file!*\n```module.exports.ReactionAddCommand = ({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})```",
            "placeholders": "`{reactions}` - How many reactions the message has after the event fires.\n`{emoji}` - The emoji that was used to react to the message.\n`{emojiid}` - The emoji ID that was used to react to the message.\n`{emojiname}` - The name of the emoji that was used to react to the message.\n`{didbotreact}` - Returns true if the bot reacted to the message, otherwise function returns false.\n`{messageurl}` - The URL of the message that was reacted to.\n`{reactedat}` - The date and time the message was reacted to.\n`{identifier}` - The emoji identifier of the emoji that was used to react to the message. Great for piecing together the emoji that was used.\n`{channelid}` - ID of hthe channel the reaction took place.\n`{channelname}` - Name of the channel the reaction took place.\n`{channelmention}` - Mention the channel the reaction took place.\n`{guildid}` - ID of the guild the reaction took place.\n`{guildname}` - Name of the guild the reaction took place."
        },
        "onreactionadd": {
            "name": "bot.ReactionAddCommand\nbot.onReactionAdd()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/reactionaddcommand",
            "description": "An event that fires when a user reacts to a message. 13 Placeholders can be used to return data about the reaction.",
            "property": "__**No Handler:**__ *`bot.onReactionAdd()` callback goes under the event!*\n```bot.ReactionAddCommand({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})\nbot.onReactionAdd()```\n \n__**With Handler:**__ *`bot.onReactionAdd()` callback goes in main file!*\n```module.exports.ReactionAddCommand = ({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})```",
            "placeholders": "`{reactions}` - How many reactions the message has after the event fires.\n`{emoji}` - The emoji that was used to react to the message.\n`{emojiid}` - The emoji ID that was used to react to the message.\n`{emojiname}` - The name of the emoji that was used to react to the message.\n`{didbotreact}` - Returns true if the bot reacted to the message, otherwise function returns false.\n`{messageurl}` - The URL of the message that was reacted to.\n`{reactedat}` - The date and time the message was reacted to.\n`{identifier}` - The emoji identifier of the emoji that was used to react to the message. Great for piecing together the emoji that was used.\n`{channelid}` - ID of hthe channel the reaction took place.\n`{channelname}` - Name of the channel the reaction took place.\n`{channelmention}` - Mention the channel the reaction took place.\n`{guildid}` - ID of the guild the reaction took place.\n`{guildname}` - Name of the guild the reaction took place."
        },
        "reactionremovecommand": {
            "name": "bot.ReactionRemoveCommand\nbot.onReactionRemove()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/reactionremovecommand",
            "description": "An event that fires when a user removes a reaction from a message. 13 Placeholders can be used to return data about the reaction.",
            "property": "__**No Handler:**__ *`bot.onReactionRemove()` callback goes under the event!*\n```bot.ReactionRemoveCommand({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})\nbot.ReactionRemoveCommand()```\n \n__**With Handler:**__ *`bot.onReactionRemove()` callback goes in main file!*\n```module.exports.ReactionRemoveCommand = ({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})```",
            "placeholders": "`{reactions}` - How many reactions the message has after the event fires.\n`{emoji}` - The emoji that was used to un-react to the message.\n`{emojiid}` - The emoji ID that was used to un-react to the message.\n`{emojiname}` - The name of the emoji that was used to un-react to the message.\n`{didbotreact}` - Returns true if the bot un-reacted to the message, otherwise function returns false.\n`{messageurl}` - The URL of the message that was un-reacted with.\n`{reactedat}` - The date and time the message was un-reacted with.\n`{identifier}` - The emoji identifier of the emoji that was used to un-react to the message. Great for piecing together the emoji that was used.\n`{channelid}` - ID of hthe channel the reaction took place.\n`{channelname}` - Name of the channel the reaction took place.\n`{channelmention}` - Mention the channel the reaction took place.\n`{guildid}` - ID of the guild the reaction took place.\n`{guildname}` - Name of the guild the reaction took place."
        },
        "onreactionremove": {
            "name": "bot.ReactionRemoveCommand\nbot.onReactionRemove()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/reactionremovecommand",
            "description": "An event that fires when a user removes a reaction from a message. 13 Placeholders can be used to return data about the reaction.",
            "property": "__**No Handler:**__ *`bot.onReactionRemove()` callback goes under the event!*\n```bot.ReactionRemoveCommand({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})\nbot.ReactionRemoveCommand()```\n \n__**With Handler:**__ *`bot.onReactionRemove()` callback goes in main file!*\n```module.exports.ReactionRemoveCommand = ({\nname: \"channel ID\",\ncode: `\n$username reacted to a message with {emoji}\n`\n})```",
            "placeholders": "`{reactions}` - How many reactions the message has after the event fires.\n`{emoji}` - The emoji that was used to un-react to the message.\n`{emojiid}` - The emoji ID that was used to un-react to the message.\n`{emojiname}` - The name of the emoji that was used to un-react to the message.\n`{didbotreact}` - Returns true if the bot un-reacted to the message, otherwise function returns false.\n`{messageurl}` - The URL of the message that was un-reacted with.\n`{reactedat}` - The date and time the message was un-reacted with.\n`{identifier}` - The emoji identifier of the emoji that was used to un-react to the message. Great for piecing together the emoji that was used.\n`{channelid}` - ID of hthe channel the reaction took place.\n`{channelname}` - Name of the channel the reaction took place.\n`{channelmention}` - Mention the channel the reaction took place.\n`{guildid}` - ID of the guild the reaction took place.\n`{guildname}` - Name of the guild the reaction took place."
        },
        "readycommand": {
            "name": "bot.ReadyCommand\nbot.onReady()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/readycommand",
            "description": "An event that fires when the bot is powered online.",
            "property": "__**No Handler:**__ *`bot.onReady()` callback goes under the event!*\n```bot.ReadyCommand({\nname: \"channel ID\",\ncode: `\nI'm' online!\n`\n})\nbot.onReady()```\n \n__**With Handler:**__ *`bot.onReady()` callback goes in main file!*\n```module.exports.ReadyCommand = ({\nname: \"channel ID\",\ncode: `\nI'm' online!\n`\n})```"
        },
        "onready": {
            "name": "bot.ReadyCommand\nbot.onReady()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/readycommand",
            "description": "An event that fires when the bot is powered online.",
            "property": "__**No Handler:**__ *`bot.onReady()` callback goes under the event!*\n```bot.ReadyCommand({\nname: \"channel ID\",\ncode: `\nI'm' online!\n`\n})\nbot.onReady()```\n \n__**With Handler:**__ *`bot.onReady()` callback goes in main file!*\n```module.exports.ReadyCommand = ({\nname: \"channel ID\",\ncode: `\nI'm' online!\n`\n})```"
        },
        "rolecreatecommand": {
            "name": "bot.RoleCreateCommand\nbot.onRoleCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/rolecreatecommand",
            "description": "An event that fires when a role is created in a guild. 10 Placeholders can be used to retrieve data from the created role.",
            "property": "__**No Handler:**__ *`bot.onRoleCreate()` callback goes under the event!*\n```bot.RoleCreateCommand({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})\nbot.RoleCreateCommand()```\n \n__**With Handler:**__ *`bot.onRoleCreate()` callback goes in main file!*\n```module.exports.RoleCreateCommand = ({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - role id\n`{name}` - role name\n`{mention}` - role mention\n`{ishoisted}` - true or false\n`{ismentionable}` - true or false\n`{color}` - color of created role in hex\n`{guildid}` - guild id of where the role is created\n`{guildname}` - guild name of where the role is created\n`{created}` - date when the role was created\ns`{position}` - position of the role from the bottom"
        },
        "onrolecreate": {
            "name": "bot.RoleCreateCommand\nbot.onRoleCreate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/rolecreatecommand",
            "description": "An event that fires when a role is created in a guild. 10 Placeholders can be used to retrieve data from the created role.",
            "property": "__**No Handler:**__ *`bot.onRoleCreate()` callback goes under the event!*\n```bot.RoleCreateCommand({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})\nbot.RoleCreateCommand()```\n \n__**With Handler:**__ *`bot.onRoleCreate()` callback goes in main file!*\n```module.exports.RoleCreateCommand = ({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - role id\n`{name}` - role name\n`{mention}` - role mention\n`{ishoisted}` - true or false\n`{ismentionable}` - true or false\n`{color}` - color of created role in hex\n`{guildid}` - guild id of where the role is created\n`{guildname}` - guild name of where the role is created\n`{created}` - date when the role was created\ns`{position}` - position of the role from the bottom"
        },
        "roledeletecommand": {
            "name": "bot.RoleDeleteCommand\nbot.onRoleDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/roledeletecommand",
            "description": "An event that fires when a role is deleted from a guild. 10 Placeholders can be used to retrieve data from the created role.",
            "property": "__**No Handler:**__ *`bot.onRoleDelete()` callback goes under the event!*\n```bot.RoleDeleteCommand({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})\nbot.RoleDeleteCommand()```\n \n__**With Handler:**__ *`bot.onRoleDelete()` callback goes in main file!*\n```module.exports.RoleDeleteCommand = ({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - role id\n`{name}` - role name\n`{ishoisted}` - true or false\n`{ismentionable}` - true or false\n`{color}` - color of deleted role in hex\n`{guildid}` - guild id of where the role is deleted\n`{guildname}` - guild name of where the role is deleted\n`{created}` - date when the role was deleted\n`{position}` - position of the role from the bottom\n`{timestamp}` - how long ago the role was created before deletion."
        },
        "onroledelete": {
            "name": "bot.RoleDeleteCommand\nbot.onRoleDelete()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/roledeletecommand",
            "description": "An event that fires when a role is deleted from a guild. 10 Placeholders can be used to retrieve data from the created role.",
            "property": "__**No Handler:**__ *`bot.onRoleDelete()` callback goes under the event!*\n```bot.RoleDeleteCommand({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})\nbot.RoleDeleteCommand()```\n \n__**With Handler:**__ *`bot.onRoleDelete()` callback goes in main file!*\n```module.exports.RoleDeleteCommand = ({\nname: \"channel ID\",\ncode: `\nThe role {name} was created in {guildname}\n`\n})```",
            "placeholders": "`{id}` - role id\n`{name}` - role name\n`{ishoisted}` - true or false\n`{ismentionable}` - true or false\n`{color}` - color of deleted role in hex\n`{guildid}` - guild id of where the role is deleted\n`{guildname}` - guild name of where the role is deleted\n`{created}` - date when the role was deleted\n`{position}` - position of the role from the bottom\n`{timestamp}` - how long ago the role was created before deletion."
        },
        "userupdatecommand": {
            "name": "bot.UserUpdateCommand\nbot.onUserUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/userupdatecommand",
            "description": "An event that fires when a user updates their account(like carl bots user update logs). 10 Placeholders can be used to return the old and new data.",
            "property": "__**No Handler:**__ *`bot.onUserUpdate()` callback goes under the event!*\n```bot.UserUpdateCommand({\nname: \"channel ID\",\ncode: `\n{tag} updated thier username!\nold - {oldname}\nnew - {newname}\n`\n})\nbot.UserUpdateCommand()```\n \n__**With Handler:**__ *`bot.onUserUpdate()` callback goes in main file!*\n```module.exports.UserUpdateCommand = ({\nname: \"channel ID\",\ncode: `\n{tag} updated thier username!\nold - {oldname}\nnew - {newname}\n`\n})```",
            "placeholders": "`{oldname}` - old username before the update\n`{newname}` - new username now\n`{olddiscrim}` - old discriminator before the update\n`{newdiscrim}` - new discriminator now\n`{oldavatar}` - old avatar before the update\n`{newavatar}` - new avatar now\n`{tag}` - The users tag\n`{id}` - The users ID\n`{mention}` - The users discord mention\n`{isbot}` - true if the user is a bot"
        },
        "onuserupdate": {
            "name": "bot.UserUpdateCommand\nbot.onUserUpdate()",
            "type": "event",
            "url": "https://docs.db-script.xyz/events/userupdatecommand",
            "description": "An event that fires when a user updates their account(like carl bots user update logs). 10 Placeholders can be used to return the old and new data.",
            "property": "__**No Handler:**__ *`bot.onUserUpdate()` callback goes under the event!*\n```bot.UserUpdateCommand({\nname: \"channel ID\",\ncode: `\n{tag} updated thier username!\nold - {oldname}\nnew - {newname}\n`\n})\nbot.UserUpdateCommand()```\n \n__**With Handler:**__ *`bot.onUserUpdate()` callback goes in main file!*\n```module.exports.UserUpdateCommand = ({\nname: \"channel ID\",\ncode: `\n{tag} updated thier username!\nold - {oldname}\nnew - {newname}\n`\n})```",
            "placeholders": "`{oldname}` - old username before the update\n`{newname}` - new username now\n`{olddiscrim}` - old discriminator before the update\n`{newdiscrim}` - new discriminator now\n`{oldavatar}` - old avatar before the update\n`{newavatar}` - new avatar now\n`{tag}` - The users tag\n`{id}` - The users ID\n`{mention}` - The users discord mention\n`{isbot}` - true if the user is a bot"
        }
    }
}